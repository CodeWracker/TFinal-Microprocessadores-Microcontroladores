

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Fri Mar 04 19:21:06 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 2.20
    44                           ; Generated 12/02/2020 GMT
    45                           ; 
    46                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F877A Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  000E                     	;# 
    93  000F                     	;# 
    94  0010                     	;# 
    95  0011                     	;# 
    96  0012                     	;# 
    97  0013                     	;# 
    98  0014                     	;# 
    99  0015                     	;# 
   100  0015                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001B                     	;# 
   108  001C                     	;# 
   109  001D                     	;# 
   110  001E                     	;# 
   111  001F                     	;# 
   112  0081                     	;# 
   113  0085                     	;# 
   114  0086                     	;# 
   115  0087                     	;# 
   116  0088                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  0091                     	;# 
   122  0092                     	;# 
   123  0093                     	;# 
   124  0094                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  010C                     	;# 
   132  010D                     	;# 
   133  010E                     	;# 
   134  010F                     	;# 
   135  018C                     	;# 
   136  018D                     	;# 
   137  0000                     	;# 
   138  0001                     	;# 
   139  0002                     	;# 
   140  0003                     	;# 
   141  0004                     	;# 
   142  0005                     	;# 
   143  0006                     	;# 
   144  0007                     	;# 
   145  0008                     	;# 
   146  0009                     	;# 
   147  000A                     	;# 
   148  000B                     	;# 
   149  000C                     	;# 
   150  000D                     	;# 
   151  000E                     	;# 
   152  000E                     	;# 
   153  000F                     	;# 
   154  0010                     	;# 
   155  0011                     	;# 
   156  0012                     	;# 
   157  0013                     	;# 
   158  0014                     	;# 
   159  0015                     	;# 
   160  0015                     	;# 
   161  0016                     	;# 
   162  0017                     	;# 
   163  0018                     	;# 
   164  0019                     	;# 
   165  001A                     	;# 
   166  001B                     	;# 
   167  001B                     	;# 
   168  001C                     	;# 
   169  001D                     	;# 
   170  001E                     	;# 
   171  001F                     	;# 
   172  0081                     	;# 
   173  0085                     	;# 
   174  0086                     	;# 
   175  0087                     	;# 
   176  0088                     	;# 
   177  0089                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  0091                     	;# 
   182  0092                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009C                     	;# 
   188  009D                     	;# 
   189  009E                     	;# 
   190  009F                     	;# 
   191  010C                     	;# 
   192  010D                     	;# 
   193  010E                     	;# 
   194  010F                     	;# 
   195  018C                     	;# 
   196  018D                     	;# 
   197                           
   198                           	psect	idataBANK0
   199  0613                     __pidataBANK0:
   200                           
   201                           ;initializer for _MLxMS
   202  0613  3419               	retlw	25
   203  0614  3400               	retlw	0
   204                           
   205                           ;initializer for _water_volume
   206  0615  34C8               	retlw	200
   207  0616  3400               	retlw	0
   208                           
   209                           ;initializer for _umidade_minima
   210  0617  340A               	retlw	10
   211  0618  3400               	retlw	0
   212                           
   213                           ;initializer for _timer_counter_max
   214  0619  340A               	retlw	10
   215  061A  3400               	retlw	0
   216  0006                     _PORTB	set	6
   217  001F                     _ADCON0bits	set	31
   218  000C                     _PIR1bits	set	12
   219  0006                     _PORTBbits	set	6
   220  000E                     _TMR1L	set	14
   221  000F                     _TMR1H	set	15
   222  0010                     _T1CONbits	set	16
   223  000B                     _INTCONbits	set	11
   224  0007                     _PORTC	set	7
   225  001E                     _ADRESH	set	30
   226  0059                     _INTF	set	89
   227  0060                     _TMR1IF	set	96
   228  0043                     _RD3	set	67
   229  0042                     _RD2	set	66
   230  0047                     _RD7	set	71
   231  0046                     _RD6	set	70
   232  0045                     _RD5	set	69
   233  0044                     _RD4	set	68
   234  0088                     _TRISD	set	136
   235  0087                     _TRISC	set	135
   236  0086                     _TRISB	set	134
   237  0085                     _TRISA	set	133
   238  009E                     _ADRESL	set	158
   239  009F                     _ADCON1bits	set	159
   240  0081                     _OPTION_REGbits	set	129
   241  008C                     _PIE1bits	set	140
   242                           
   243                           	psect	strings
   244  0500                     __pstrings:
   245  0500                     stringtab:
   246  0500                     __stringtab:
   247  0500                     stringcode:	
   248                           ;	String table - string pointers are 1 byte each
   249                           
   250  0500                     stringdir:
   251  0500  3005               	movlw	high stringdir
   252  0501  008A               	movwf	10
   253  0502  0804               	movf	4,w
   254  0503  0A84               	incf	4,f
   255  0504  0782               	addwf	2,f
   256  0505                     __stringbase:
   257  0505  3400               	retlw	0
   258  0506                     __end_of__stringtab:
   259  0506                     STR_1:
   260  0506  344E               	retlw	78	;'N'
   261  0507  3445               	retlw	69	;'E'
   262  0508  3457               	retlw	87	;'W'
   263  0509  3420               	retlw	32	;' '
   264  050A  3454               	retlw	84	;'T'
   265  050B  3448               	retlw	72	;'H'
   266  050C  3452               	retlw	82	;'R'
   267  050D  3445               	retlw	69	;'E'
   268  050E  3453               	retlw	83	;'S'
   269  050F  3448               	retlw	72	;'H'
   270  0510  344F               	retlw	79	;'O'
   271  0511  344C               	retlw	76	;'L'
   272  0512  3444               	retlw	68	;'D'
   273  0513  343A               	retlw	58	;':'
   274  0514  3400               	retlw	0
   275  0515                     STR_2:
   276  0515  344E               	retlw	78	;'N'
   277  0516  3445               	retlw	69	;'E'
   278  0517  3457               	retlw	87	;'W'
   279  0518  3420               	retlw	32	;' '
   280  0519  3456               	retlw	86	;'V'
   281  051A  344F               	retlw	79	;'O'
   282  051B  344C               	retlw	76	;'L'
   283  051C  3455               	retlw	85	;'U'
   284  051D  344D               	retlw	77	;'M'
   285  051E  3445               	retlw	69	;'E'
   286  051F  343A               	retlw	58	;':'
   287  0520  3400               	retlw	0
   288                           
   289                           	psect	cinit
   290  000F                     start_initialization:	
   291                           ; #config settings
   292                           
   293  000F                     __initialization:
   294                           
   295                           ; Initialize objects allocated to BANK0
   296  000F  1383               	bcf	3,7	;select IRP bank0
   297  0010  3043               	movlw	low (__pdataBANK0+8)
   298  0011  00FD               	movwf	btemp+-1
   299  0012  3006               	movlw	high __pidataBANK0
   300  0013  00FE               	movwf	btemp
   301  0014  3013               	movlw	low __pidataBANK0
   302  0015  00FF               	movwf	btemp+1
   303  0016  303B               	movlw	low __pdataBANK0
   304  0017  0084               	movwf	4
   305  0018  120A  118A  25C1  120A  118A  	fcall	init_ram0
   306                           
   307                           ; Clear objects allocated to BANK0
   308  001D  01C3               	clrf	__pbssBANK0& (0+127)
   309  001E  01C4               	clrf	(__pbssBANK0+1)& (0+127)
   310  001F  01C5               	clrf	(__pbssBANK0+2)& (0+127)
   311  0020  01C6               	clrf	(__pbssBANK0+3)& (0+127)
   312                           
   313                           ; Clear objects allocated to COMMON
   314  0021  01F9               	clrf	__pbssCOMMON& (0+127)
   315  0022  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   316  0023                     end_of_initialization:	
   317                           ;End of C runtime variable initialization code
   318                           
   319  0023                     __end_of__initialization:
   320  0023  0183               	clrf	3
   321  0024  120A  118A  2B7F   	ljmp	_main	;jump to C main() function
   322                           
   323                           	psect	bssCOMMON
   324  0079                     __pbssCOMMON:
   325  0079                     _irrigacao_ativa:
   326  0079                     	ds	2
   327                           
   328                           	psect	bssBANK0
   329  0043                     __pbssBANK0:
   330  0043                     _setup_menu:
   331  0043                     	ds	2
   332  0045                     _timer_counter:
   333  0045                     	ds	2
   334                           
   335                           	psect	dataBANK0
   336  003B                     __pdataBANK0:
   337  003B                     _MLxMS:
   338  003B                     	ds	2
   339  003D                     _water_volume:
   340  003D                     	ds	2
   341  003F                     _umidade_minima:
   342  003F                     	ds	2
   343  0041                     _timer_counter_max:
   344  0041                     	ds	2
   345                           
   346                           	psect	inittext
   347  05BD                     init_fetch0:	
   348                           ;	Called with low address in FSR and high address in W
   349                           
   350  05BD  087E               	movf	btemp,w
   351  05BE  008A               	movwf	10
   352  05BF  087F               	movf	btemp+1,w
   353  05C0  0082               	movwf	2
   354  05C1                     init_ram0:	
   355                           ;Called with:
   356                           ;	high address of idata address in btemp 
   357                           ;	low address of idata address in btemp+1 
   358                           ;	low address of data in FSR
   359                           ;	high address + 1 of data in btemp-1
   360                           
   361  05C1  120A  118A  25BD  120A  118A  	fcall	init_fetch0
   362  05C6  0080               	movwf	0
   363  05C7  0A84               	incf	4,f
   364  05C8  0804               	movf	4,w
   365  05C9  067D               	xorwf	btemp+-1,w
   366  05CA  1903               	btfsc	3,2
   367  05CB  3400               	retlw	0
   368  05CC  0AFF               	incf	btemp+1,f
   369  05CD  1903               	btfsc	3,2
   370  05CE  0AFE               	incf	btemp,f
   371  05CF  2DC1               	goto	init_ram0
   372                           
   373                           	psect	cstackCOMMON
   374  0070                     __pcstackCOMMON:
   375  0070                     ?_Lcd_Port:
   376  0070                     ?_Lcd_Cmd:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  0070                     ?_Lcd_Clear:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_Lcd_Init:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_Lcd_Write_Char:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  0070                     ?_Lcd_Write_String:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  0070                     ?_setupNewVolumeFlow:	
   392                           ; 1 bytes @ 0x0
   393                           
   394  0070                     ?_setupTimer:	
   395                           ; 1 bytes @ 0x0
   396                           
   397  0070                     ?_handleTimerInterruption:	
   398                           ; 1 bytes @ 0x0
   399                           
   400  0070                     ??_handleTimerInterruption:	
   401                           ; 1 bytes @ 0x0
   402                           
   403  0070                     ?_irrigar:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_handleExternalInterruption:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ??_handleExternalInterruption:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_interrupcao:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_setupExternalInterruption:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_handleMenu:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_verifyMenu:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_verifySensor:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?_setupWatchdogTimer:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_setupADC:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     ?_main:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     ?i1_irrigar:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ??i1_irrigar:	
   440                           ; 1 bytes @ 0x0
   441                           
   442                           
   443                           ; 1 bytes @ 0x0
   444  0070                     	ds	1
   445  0071                     ??_interrupcao:
   446                           
   447                           ; 1 bytes @ 0x1
   448  0071                     	ds	2
   449  0073                     ??_Lcd_Port:
   450  0073                     ??_irrigar:	
   451                           ; 1 bytes @ 0x3
   452                           
   453  0073                     ??_setupExternalInterruption:	
   454                           ; 1 bytes @ 0x3
   455                           
   456  0073                     ??_setupWatchdogTimer:	
   457                           ; 1 bytes @ 0x3
   458                           
   459  0073                     ??_setupADC:	
   460                           ; 1 bytes @ 0x3
   461                           
   462  0073                     ?___wmul:	
   463                           ; 1 bytes @ 0x3
   464                           
   465  0073                     ?___awmod:	
   466                           ; 2 bytes @ 0x3
   467                           
   468  0073                     Lcd_Port@a:	
   469                           ; 2 bytes @ 0x3
   470                           
   471  0073                     ___wmul@multiplier:	
   472                           ; 1 bytes @ 0x3
   473                           
   474  0073                     ___awmod@divisor:	
   475                           ; 2 bytes @ 0x3
   476                           
   477                           
   478                           ; 2 bytes @ 0x3
   479  0073                     	ds	1
   480  0074                     ??_Lcd_Cmd:
   481  0074                     ??_Lcd_Write_Char:	
   482                           ; 1 bytes @ 0x4
   483                           
   484                           
   485                           ; 1 bytes @ 0x4
   486  0074                     	ds	1
   487  0075                     Lcd_Write_Char@temp:
   488  0075                     ___wmul@multiplicand:	
   489                           ; 1 bytes @ 0x5
   490                           
   491  0075                     ___awmod@dividend:	
   492                           ; 2 bytes @ 0x5
   493                           
   494                           
   495                           ; 2 bytes @ 0x5
   496  0075                     	ds	1
   497  0076                     Lcd_Cmd@a:
   498  0076                     Lcd_Write_Char@y:	
   499                           ; 1 bytes @ 0x6
   500                           
   501                           
   502                           ; 1 bytes @ 0x6
   503  0076                     	ds	1
   504  0077                     ??_Lcd_Clear:
   505  0077                     ?_Lcd_Set_Cursor:	
   506                           ; 1 bytes @ 0x7
   507                           
   508  0077                     ??_Lcd_Init:	
   509                           ; 1 bytes @ 0x7
   510                           
   511  0077                     ??___wmul:	
   512                           ; 1 bytes @ 0x7
   513                           
   514  0077                     ??___awmod:	
   515                           ; 1 bytes @ 0x7
   516                           
   517  0077                     Lcd_Set_Cursor@b:	
   518                           ; 1 bytes @ 0x7
   519                           
   520  0077                     Lcd_Write_Char@a:	
   521                           ; 1 bytes @ 0x7
   522                           
   523  0077                     ___wmul@product:	
   524                           ; 1 bytes @ 0x7
   525                           
   526                           
   527                           ; 2 bytes @ 0x7
   528  0077                     	ds	1
   529  0078                     ??_Lcd_Write_String:
   530                           
   531                           ; 1 bytes @ 0x8
   532  0078                     	ds	1
   533  0079                     ??_changeTimerMaxConter:
   534  0079                     ??_setupNewVolumeFlow:	
   535                           ; 1 bytes @ 0x9
   536                           
   537  0079                     ??_setupTimer:	
   538                           ; 1 bytes @ 0x9
   539                           
   540  0079                     ??_main:	
   541                           ; 1 bytes @ 0x9
   542                           
   543                           
   544                           	psect	cstackBANK0
   545  0020                     __pcstackBANK0:	
   546                           ; 1 bytes @ 0x9
   547                           
   548  0020                     ??_Lcd_Set_Cursor:
   549  0020                     ___awmod@counter:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0020                     Lcd_Write_String@i:	
   553                           ; 1 bytes @ 0x0
   554                           
   555                           
   556                           ; 2 bytes @ 0x0
   557  0020                     	ds	1
   558  0021                     ___awmod@sign:
   559                           
   560                           ; 1 bytes @ 0x1
   561  0021                     	ds	1
   562  0022                     ?___awdiv:
   563  0022                     Lcd_Set_Cursor@a:	
   564                           ; 2 bytes @ 0x2
   565                           
   566  0022                     Lcd_Write_String@a:	
   567                           ; 1 bytes @ 0x2
   568                           
   569  0022                     ___awdiv@divisor:	
   570                           ; 1 bytes @ 0x2
   571                           
   572                           
   573                           ; 2 bytes @ 0x2
   574  0022                     	ds	1
   575  0023                     Lcd_Set_Cursor@z:
   576                           
   577                           ; 1 bytes @ 0x3
   578  0023                     	ds	1
   579  0024                     Lcd_Set_Cursor@y:
   580  0024                     ___awdiv@dividend:	
   581                           ; 1 bytes @ 0x4
   582                           
   583                           
   584                           ; 2 bytes @ 0x4
   585  0024                     	ds	1
   586  0025                     Lcd_Set_Cursor@temp:
   587                           
   588                           ; 1 bytes @ 0x5
   589  0025                     	ds	1
   590  0026                     ??___awdiv:
   591                           
   592                           ; 1 bytes @ 0x6
   593  0026                     	ds	1
   594  0027                     ___awdiv@counter:
   595                           
   596                           ; 1 bytes @ 0x7
   597  0027                     	ds	1
   598  0028                     ___awdiv@sign:
   599                           
   600                           ; 1 bytes @ 0x8
   601  0028                     	ds	1
   602  0029                     ___awdiv@quotient:
   603                           
   604                           ; 2 bytes @ 0x9
   605  0029                     	ds	2
   606  002B                     ?_changeTimerMaxConter:
   607  002B                     ?_writeValor:	
   608                           ; 1 bytes @ 0xB
   609                           
   610  002B                     ?_getADConverterValue:	
   611                           ; 1 bytes @ 0xB
   612                           
   613  002B                     changeTimerMaxConter@mili_s:	
   614                           ; 2 bytes @ 0xB
   615                           
   616  002B                     writeValor@valor:	
   617                           ; 2 bytes @ 0xB
   618                           
   619                           
   620                           ; 2 bytes @ 0xB
   621  002B                     	ds	2
   622  002D                     ??_writeValor:
   623  002D                     ??_getADConverterValue:	
   624                           ; 1 bytes @ 0xD
   625                           
   626  002D                     setupNewVolumeFlow@new_ms:	
   627                           ; 1 bytes @ 0xD
   628                           
   629                           
   630                           ; 2 bytes @ 0xD
   631  002D                     	ds	1
   632  002E                     writeValor@centena:
   633                           
   634                           ; 1 bytes @ 0xE
   635  002E                     	ds	1
   636  002F                     writeValor@dezena:
   637  002F                     getADConverterValue@leitura:	
   638                           ; 1 bytes @ 0xF
   639                           
   640                           
   641                           ; 2 bytes @ 0xF
   642  002F                     	ds	1
   643  0030                     writeValor@unidade:
   644                           
   645                           ; 1 bytes @ 0x10
   646  0030                     	ds	1
   647  0031                     ??_handleMenu:
   648  0031                     ??_verifySensor:	
   649                           ; 1 bytes @ 0x11
   650                           
   651                           
   652                           ; 1 bytes @ 0x11
   653  0031                     	ds	3
   654  0034                     handleMenu@volume:
   655                           
   656                           ; 2 bytes @ 0x14
   657  0034                     	ds	2
   658  0036                     handleMenu@umidade:
   659                           
   660                           ; 2 bytes @ 0x16
   661  0036                     	ds	2
   662  0038                     ??_verifyMenu:
   663                           
   664                           ; 1 bytes @ 0x18
   665  0038                     	ds	3
   666                           
   667                           	psect	maintext
   668  037F                     __pmaintext:	
   669 ;;
   670 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   671 ;;
   672 ;; *************** function _main *****************
   673 ;; Defined at:
   674 ;;		line 357 in file "main.c"
   675 ;; Parameters:    Size  Location     Type
   676 ;;		None
   677 ;; Auto vars:     Size  Location     Type
   678 ;;		None
   679 ;; Return value:  Size  Location     Type
   680 ;;                  1    wreg      void 
   681 ;; Registers used:
   682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   683 ;; Tracked objects:
   684 ;;		On entry : B00/0
   685 ;;		On exit  : 0/0
   686 ;;		Unchanged: 0/0
   687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   688 ;;      Params:         0       0       0       0       0
   689 ;;      Locals:         0       0       0       0       0
   690 ;;      Temps:          0       0       0       0       0
   691 ;;      Totals:         0       0       0       0       0
   692 ;;Total ram usage:        0 bytes
   693 ;; Hardware stack levels required when called: 9
   694 ;; This function calls:
   695 ;;		_Lcd_Init
   696 ;;		_setupADC
   697 ;;		_setupExternalInterruption
   698 ;;		_setupTimer
   699 ;;		_setupWatchdogTimer
   700 ;;		_verifyMenu
   701 ;;		_verifySensor
   702 ;; This function is called by:
   703 ;;		Startup code after reset
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707  037F                     _main:	
   708                           ;psect for function _main
   709                           
   710  037F                     l1920:	
   711                           ;incstack = 0
   712 ;; hardware stack exceeded
   713                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   714                           
   715                           
   716                           ;main.c: 360:     TRISA = 0b00000001;
   717  037F  3001               	movlw	1
   718  0380  1683               	bsf	3,5	;RP0=1, select bank1
   719  0381  1303               	bcf	3,6	;RP1=0, select bank1
   720  0382  0085               	movwf	5	;volatile
   721                           
   722                           ;main.c: 361:     TRISB = 0b00011101;
   723  0383  301D               	movlw	29
   724  0384  0086               	movwf	6	;volatile
   725  0385                     l1922:
   726                           
   727                           ;main.c: 362:     TRISC = 0;
   728  0385  0187               	clrf	7	;volatile
   729  0386                     l1924:
   730                           
   731                           ;main.c: 363:     PORTC = 0;
   732  0386  1283               	bcf	3,5	;RP0=0, select bank0
   733  0387  1303               	bcf	3,6	;RP1=0, select bank0
   734  0388  0187               	clrf	7	;volatile
   735  0389                     l1926:
   736                           
   737                           ;main.c: 364:     TRISD = 0b00000000;
   738  0389  1683               	bsf	3,5	;RP0=1, select bank1
   739  038A  1303               	bcf	3,6	;RP1=0, select bank1
   740  038B  0188               	clrf	8	;volatile
   741  038C                     l1928:
   742                           
   743                           ;main.c: 365:     OPTION_REGbits.nRBPU = 0;
   744  038C  1381               	bcf	1,7	;volatile
   745  038D                     l1930:
   746                           
   747                           ;main.c: 366:     PORTB = 0;
   748  038D  1283               	bcf	3,5	;RP0=0, select bank0
   749  038E  1303               	bcf	3,6	;RP1=0, select bank0
   750  038F  0186               	clrf	6	;volatile
   751  0390                     l1932:
   752                           
   753                           ;main.c: 368:     setupExternalInterruption();
   754  0390  120A  118A  2623  120A  118A  	fcall	_setupExternalInterruption
   755  0395                     l1934:
   756                           
   757                           ;main.c: 369:     setupWatchdogTimer();
   758  0395  120A  118A  261B  120A  118A  	fcall	_setupWatchdogTimer
   759  039A                     l1936:
   760                           
   761                           ;main.c: 370:     setupTimer();
   762  039A  120A  118A  25A8  120A  118A  	fcall	_setupTimer
   763                           
   764                           ;main.c: 371:     setupADC();
   765  039F  120A  118A  2591  120A  118A  	fcall	_setupADC
   766  03A4                     l1938:
   767                           
   768                           ;main.c: 372:     Lcd_Init();
   769  03A4  120A  118A  226F  120A  118A  	fcall	_Lcd_Init
   770  03A9                     l1940:
   771                           
   772                           ;main.c: 375:     {;main.c: 376:         verifySensor();
   773  03A9  120A  118A  24A8  120A  118A  	fcall	_verifySensor
   774  03AE                     l1942:
   775                           
   776                           ;main.c: 377:         verifyMenu();
   777  03AE  120A  118A  2521  120A  118A  	fcall	_verifyMenu
   778  03B3  0064               	clrwdt	;# 
   779  03B4  2BA9               	goto	l1940
   780  03B5  120A  118A  280C   	ljmp	start
   781  03B8                     __end_of_main:
   782                           
   783                           	psect	text1
   784  04A8                     __ptext1:	
   785 ;; *************** function _verifySensor *****************
   786 ;; Defined at:
   787 ;;		line 298 in file "main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;		None
   792 ;; Return value:  Size  Location     Type
   793 ;;                  1    wreg      void 
   794 ;; Registers used:
   795 ;;		wreg, status,2, status,0, pclath, cstack
   796 ;; Tracked objects:
   797 ;;		On entry : 0/0
   798 ;;		On exit  : 0/0
   799 ;;		Unchanged: 0/0
   800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   801 ;;      Params:         0       0       0       0       0
   802 ;;      Locals:         0       0       0       0       0
   803 ;;      Temps:          0       1       0       0       0
   804 ;;      Totals:         0       1       0       0       0
   805 ;;Total ram usage:        1 bytes
   806 ;; Hardware stack levels used: 1
   807 ;; Hardware stack levels required when called: 5
   808 ;; This function calls:
   809 ;;		_getADConverterValue
   810 ;;		_irrigar
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816  04A8                     _verifySensor:	
   817                           ;psect for function _verifySensor
   818                           
   819  04A8                     l1910:	
   820                           ;incstack = 0
   821                           ; Regs used in _verifySensor: [wreg+status,2+status,0+pclath+cstack]
   822                           
   823                           
   824                           ;main.c: 300:     if(getADConverterValue()<umidade_minima){
   825  04A8  120A  118A  23EF  120A  118A  	fcall	_getADConverterValue
   826  04AD  1283               	bcf	3,5	;RP0=0, select bank0
   827  04AE  1303               	bcf	3,6	;RP1=0, select bank0
   828  04AF  082C               	movf	?_getADConverterValue+1,w
   829  04B0  3A80               	xorlw	128
   830  04B1  00B1               	movwf	??_verifySensor
   831  04B2  0840               	movf	_umidade_minima+1,w
   832  04B3  3A80               	xorlw	128
   833  04B4  0231               	subwf	??_verifySensor,w
   834  04B5  1D03               	skipz
   835  04B6  2CB9               	goto	u1505
   836  04B7  083F               	movf	_umidade_minima,w
   837  04B8  022B               	subwf	?_getADConverterValue,w
   838  04B9                     u1505:
   839  04B9  1803               	skipnc
   840  04BA  2CBC               	goto	u1501
   841  04BB  2CBD               	goto	u1500
   842  04BC                     u1501:
   843  04BC  2CC6               	goto	l176
   844  04BD                     u1500:
   845  04BD                     l1912:
   846                           
   847                           ;main.c: 301:         PORTBbits.RB7 = 1;
   848  04BD  1283               	bcf	3,5	;RP0=0, select bank0
   849  04BE  1303               	bcf	3,6	;RP1=0, select bank0
   850  04BF  1786               	bsf	6,7	;volatile
   851  04C0                     l1914:
   852                           
   853                           ;main.c: 302:         irrigar();
   854  04C0  120A  118A  25FF  120A  118A  	fcall	_irrigar
   855                           
   856                           ;main.c: 303:     }
   857  04C5  2CC9               	goto	l178
   858  04C6                     l176:	
   859                           ;main.c: 304:     else{
   860                           
   861                           
   862                           ;main.c: 305:         PORTBbits.RB7 = 0;
   863  04C6  1283               	bcf	3,5	;RP0=0, select bank0
   864  04C7  1303               	bcf	3,6	;RP1=0, select bank0
   865  04C8  1386               	bcf	6,7	;volatile
   866  04C9                     l178:
   867  04C9  0008               	return
   868  04CA                     __end_of_verifySensor:
   869                           
   870                           	psect	text2
   871  05FF                     __ptext2:	
   872 ;; *************** function _irrigar *****************
   873 ;; Defined at:
   874 ;;		line 163 in file "main.c"
   875 ;; Parameters:    Size  Location     Type
   876 ;;		None
   877 ;; Auto vars:     Size  Location     Type
   878 ;;		None
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      void 
   881 ;; Registers used:
   882 ;;		wreg, status,2
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   888 ;;      Params:         0       0       0       0       0
   889 ;;      Locals:         0       0       0       0       0
   890 ;;      Temps:          0       0       0       0       0
   891 ;;      Totals:         0       0       0       0       0
   892 ;;Total ram usage:        0 bytes
   893 ;; Hardware stack levels used: 1
   894 ;; Hardware stack levels required when called: 3
   895 ;; This function calls:
   896 ;;		Nothing
   897 ;; This function is called by:
   898 ;;		_verifySensor
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902  05FF                     _irrigar:	
   903                           ;psect for function _irrigar
   904                           
   905  05FF                     l1386:	
   906                           ;incstack = 0
   907                           ; Regs used in _irrigar: [wreg+status,2]
   908                           
   909                           
   910                           ;main.c: 165:     irrigacao_ativa = 1;
   911  05FF  3001               	movlw	1
   912  0600  00F9               	movwf	_irrigacao_ativa
   913  0601  3000               	movlw	0
   914  0602  00FA               	movwf	_irrigacao_ativa+1
   915  0603                     l1388:
   916                           
   917                           ;main.c: 166:     timer_counter = 0;
   918  0603  1283               	bcf	3,5	;RP0=0, select bank0
   919  0604  1303               	bcf	3,6	;RP1=0, select bank0
   920  0605  01C5               	clrf	_timer_counter
   921  0606  01C6               	clrf	_timer_counter+1
   922  0607                     l1390:
   923                           
   924                           ;main.c: 168:     T1CONbits.TMR1ON = 1;
   925  0607  1410               	bsf	16,0	;volatile
   926  0608                     l128:
   927  0608  0008               	return
   928  0609                     __end_of_irrigar:
   929                           
   930                           	psect	text3
   931  03EF                     __ptext3:	
   932 ;; *************** function _getADConverterValue *****************
   933 ;; Defined at:
   934 ;;		line 292 in file "main.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;		None
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  leitura         2   15[BANK0 ] int 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  2   11[BANK0 ] int 
   941 ;; Registers used:
   942 ;;		wreg, status,2, status,0, pclath, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         0       2       0       0       0
   949 ;;      Locals:         0       2       0       0       0
   950 ;;      Temps:          0       2       0       0       0
   951 ;;      Totals:         0       6       0       0       0
   952 ;;Total ram usage:        6 bytes
   953 ;; Hardware stack levels used: 1
   954 ;; Hardware stack levels required when called: 4
   955 ;; This function calls:
   956 ;;		___awdiv
   957 ;;		___wmul
   958 ;; This function is called by:
   959 ;;		_verifySensor
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963  03EF                     _getADConverterValue:	
   964                           ;psect for function _getADConverterValue
   965                           
   966  03EF                     l1870:	
   967                           ;incstack = 0
   968                           ; Regs used in _getADConverterValue: [wreg+status,2+status,0+pclath+cstack]
   969                           
   970                           
   971                           ;main.c: 293:     ADCON0bits.GO = 1;
   972  03EF  1283               	bcf	3,5	;RP0=0, select bank0
   973  03F0  1303               	bcf	3,6	;RP1=0, select bank0
   974  03F1  151F               	bsf	31,2	;volatile
   975  03F2                     l1872:
   976                           
   977                           ;main.c: 294:     _delay((unsigned long)((100)*(4000000/4000000.0)));
   978  03F2  3020               	movlw	32
   979  03F3  1283               	bcf	3,5	;RP0=0, select bank0
   980  03F4  1303               	bcf	3,6	;RP1=0, select bank0
   981  03F5  00AD               	movwf	??_getADConverterValue
   982  03F6                     u1517:
   983  03F6  0BAD               	decfsz	??_getADConverterValue,f
   984  03F7  2BF6               	goto	u1517
   985  03F8  0000               	nop
   986  03F9                     l1874:
   987                           
   988                           ;main.c: 295:     int leitura = 100*ADRESH/256;
   989  03F9  3000               	movlw	0
   990  03FA  1283               	bcf	3,5	;RP0=0, select bank0
   991  03FB  1303               	bcf	3,6	;RP1=0, select bank0
   992  03FC  00A2               	movwf	___awdiv@divisor
   993  03FD  3001               	movlw	1
   994  03FE  00A3               	movwf	___awdiv@divisor+1
   995  03FF  081E               	movf	30,w	;volatile
   996  0400  00AD               	movwf	??_getADConverterValue
   997  0401  01AE               	clrf	??_getADConverterValue+1
   998  0402  082D               	movf	??_getADConverterValue,w
   999  0403  00F3               	movwf	___wmul@multiplier
  1000  0404  082E               	movf	??_getADConverterValue+1,w
  1001  0405  00F4               	movwf	___wmul@multiplier+1
  1002  0406  3064               	movlw	100
  1003  0407  00F5               	movwf	___wmul@multiplicand
  1004  0408  3000               	movlw	0
  1005  0409  00F6               	movwf	___wmul@multiplicand+1
  1006  040A  120A  118A  2483  120A  118A  	fcall	___wmul
  1007  040F  0874               	movf	?___wmul+1,w
  1008  0410  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0411  1303               	bcf	3,6	;RP1=0, select bank0
  1010  0412  00A5               	movwf	___awdiv@dividend+1
  1011  0413  0873               	movf	?___wmul,w
  1012  0414  00A4               	movwf	___awdiv@dividend
  1013  0415  120A  118A  2206  120A  118A  	fcall	___awdiv
  1014  041A  1283               	bcf	3,5	;RP0=0, select bank0
  1015  041B  1303               	bcf	3,6	;RP1=0, select bank0
  1016  041C  0823               	movf	?___awdiv+1,w
  1017  041D  00B0               	movwf	getADConverterValue@leitura+1
  1018  041E  0822               	movf	?___awdiv,w
  1019  041F  00AF               	movwf	getADConverterValue@leitura
  1020  0420                     l1876:
  1021                           
  1022                           ;main.c: 296:     return leitura;
  1023  0420  0830               	movf	getADConverterValue@leitura+1,w
  1024  0421  00AC               	movwf	?_getADConverterValue+1
  1025  0422  082F               	movf	getADConverterValue@leitura,w
  1026  0423  00AB               	movwf	?_getADConverterValue
  1027  0424                     l173:
  1028  0424  0008               	return
  1029  0425                     __end_of_getADConverterValue:
  1030                           
  1031                           	psect	text4
  1032  0521                     __ptext4:	
  1033 ;; *************** function _verifyMenu *****************
  1034 ;; Defined at:
  1035 ;;		line 280 in file "main.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;		None
  1038 ;; Auto vars:     Size  Location     Type
  1039 ;;		None
  1040 ;; Return value:  Size  Location     Type
  1041 ;;                  1    wreg      void 
  1042 ;; Registers used:
  1043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1049 ;;      Params:         0       0       0       0       0
  1050 ;;      Locals:         0       0       0       0       0
  1051 ;;      Temps:          0       3       0       0       0
  1052 ;;      Totals:         0       3       0       0       0
  1053 ;;Total ram usage:        3 bytes
  1054 ;; Hardware stack levels used: 1
  1055 ;; Hardware stack levels required when called: 8
  1056 ;; This function calls:
  1057 ;;		_handleMenu
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063  0521                     _verifyMenu:	
  1064                           ;psect for function _verifyMenu
  1065                           
  1066  0521                     l1900:	
  1067                           ;incstack = 0
  1068 ;; hardware stack exceeded
  1069                           ; Regs used in _verifyMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1070                           
  1071                           
  1072                           ;main.c: 282:     if (!PORTBbits.RB2)
  1073  0521  1283               	bcf	3,5	;RP0=0, select bank0
  1074  0522  1303               	bcf	3,6	;RP1=0, select bank0
  1075  0523  1906               	btfsc	6,2	;volatile
  1076  0524  2D26               	goto	u1491
  1077  0525  2D27               	goto	u1490
  1078  0526                     u1491:
  1079  0526  2D3F               	goto	l170
  1080  0527                     u1490:
  1081  0527                     l1902:
  1082                           
  1083                           ;main.c: 283:     {;main.c: 284:         setup_menu = 1;
  1084  0527  3001               	movlw	1
  1085  0528  00C3               	movwf	_setup_menu
  1086  0529  3000               	movlw	0
  1087  052A  00C4               	movwf	_setup_menu+1
  1088  052B                     l1904:
  1089                           
  1090                           ;main.c: 285:         PORTBbits.RB5 = 1;
  1091  052B  1686               	bsf	6,5	;volatile
  1092                           
  1093                           ;main.c: 286:         _delay((unsigned long)((500)*(4000000/4000.0)));
  1094  052C  3003               	movlw	3
  1095  052D  1283               	bcf	3,5	;RP0=0, select bank0
  1096  052E  1303               	bcf	3,6	;RP1=0, select bank0
  1097  052F  00BA               	movwf	??_verifyMenu+2
  1098  0530  308A               	movlw	138
  1099  0531  00B9               	movwf	??_verifyMenu+1
  1100  0532  3055               	movlw	85
  1101  0533  00B8               	movwf	??_verifyMenu
  1102  0534                     u1527:
  1103  0534  0BB8               	decfsz	??_verifyMenu,f
  1104  0535  2D34               	goto	u1527
  1105  0536  0BB9               	decfsz	??_verifyMenu+1,f
  1106  0537  2D34               	goto	u1527
  1107  0538  0BBA               	decfsz	??_verifyMenu+2,f
  1108  0539  2D34               	goto	u1527
  1109  053A                     l1906:
  1110                           
  1111                           ;main.c: 287:         handleMenu();
  1112  053A  120A  118A  2027  120A  118A  	fcall	_handleMenu
  1113  053F                     l170:
  1114  053F  0008               	return
  1115  0540                     __end_of_verifyMenu:
  1116                           
  1117                           	psect	text5
  1118  0027                     __ptext5:	
  1119 ;; *************** function _handleMenu *****************
  1120 ;; Defined at:
  1121 ;;		line 216 in file "main.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;		None
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;  umidade         2   22[BANK0 ] int 
  1126 ;;  volume          2   20[BANK0 ] int 
  1127 ;; Return value:  Size  Location     Type
  1128 ;;                  1    wreg      void 
  1129 ;; Registers used:
  1130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1131 ;; Tracked objects:
  1132 ;;		On entry : 0/0
  1133 ;;		On exit  : 0/0
  1134 ;;		Unchanged: 0/0
  1135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1136 ;;      Params:         0       0       0       0       0
  1137 ;;      Locals:         0       4       0       0       0
  1138 ;;      Temps:          0       3       0       0       0
  1139 ;;      Totals:         0       7       0       0       0
  1140 ;;Total ram usage:        7 bytes
  1141 ;; Hardware stack levels used: 1
  1142 ;; Hardware stack levels required when called: 7
  1143 ;; This function calls:
  1144 ;;		_Lcd_Clear
  1145 ;;		_Lcd_Set_Cursor
  1146 ;;		_Lcd_Write_String
  1147 ;;		_setupNewVolumeFlow
  1148 ;;		_writeValor
  1149 ;; This function is called by:
  1150 ;;		_verifyMenu
  1151 ;; This function uses a non-reentrant model
  1152 ;;
  1153                           
  1154  0027                     _handleMenu:	
  1155                           ;psect for function _handleMenu
  1156                           
  1157  0027                     l1776:	
  1158                           ;incstack = 0
  1159 ;; hardware stack exceeded
  1160                           ; Regs used in _handleMenu: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1161                           
  1162                           
  1163                           ;main.c: 218:     int volume = water_volume;
  1164  0027  1283               	bcf	3,5	;RP0=0, select bank0
  1165  0028  1303               	bcf	3,6	;RP1=0, select bank0
  1166  0029  083E               	movf	_water_volume+1,w
  1167  002A  00B5               	movwf	handleMenu@volume+1
  1168  002B  083D               	movf	_water_volume,w
  1169  002C  00B4               	movwf	handleMenu@volume
  1170                           
  1171                           ;main.c: 219:     int umidade = umidade_minima;
  1172  002D  0840               	movf	_umidade_minima+1,w
  1173  002E  00B7               	movwf	handleMenu@umidade+1
  1174  002F  083F               	movf	_umidade_minima,w
  1175  0030  00B6               	movwf	handleMenu@umidade
  1176                           
  1177                           ;main.c: 221:     while(setup_menu == 1){
  1178  0031  28C9               	goto	l1814
  1179  0032                     l148:
  1180  0032  0064               	clrwdt	;# 
  1181  0033                     l1778:
  1182                           
  1183                           ;main.c: 223:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1184  0033  3082               	movlw	130
  1185  0034  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0035  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0036  00B2               	movwf	??_handleMenu+1
  1188  0037  30DD               	movlw	221
  1189  0038  00B1               	movwf	??_handleMenu
  1190  0039                     u1537:
  1191  0039  0BB1               	decfsz	??_handleMenu,f
  1192  003A  2839               	goto	u1537
  1193  003B  0BB2               	decfsz	??_handleMenu+1,f
  1194  003C  2839               	goto	u1537
  1195  003D                     l1780:
  1196                           
  1197                           ;main.c: 224:         Lcd_Set_Cursor(1,1);
  1198  003D  01F7               	clrf	Lcd_Set_Cursor@b
  1199  003E  0AF7               	incf	Lcd_Set_Cursor@b,f
  1200  003F  3001               	movlw	1
  1201  0040  120A  118A  2327  120A  118A  	fcall	_Lcd_Set_Cursor
  1202  0045                     l1782:
  1203                           
  1204                           ;main.c: 225:         Lcd_Write_String("NEW THRESHOLD:");
  1205  0045  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1206  0046  120A  118A  245A  120A  118A  	fcall	_Lcd_Write_String
  1207  004B                     l1784:
  1208                           
  1209                           ;main.c: 226:         writeValor(umidade);
  1210  004B  1283               	bcf	3,5	;RP0=0, select bank0
  1211  004C  1303               	bcf	3,6	;RP1=0, select bank0
  1212  004D  0837               	movf	handleMenu@umidade+1,w
  1213  004E  00AC               	movwf	writeValor@valor+1
  1214  004F  0836               	movf	handleMenu@umidade,w
  1215  0050  00AB               	movwf	writeValor@valor
  1216  0051  120A  118A  2198  120A  118A  	fcall	_writeValor
  1217  0056                     l1786:
  1218                           
  1219                           ;main.c: 227:         if(!PORTBbits.RB2){
  1220  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1221  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1222  0058  1906               	btfsc	6,2	;volatile
  1223  0059  285B               	goto	u1361
  1224  005A  285C               	goto	u1360
  1225  005B                     u1361:
  1226  005B  2872               	goto	l1790
  1227  005C                     u1360:
  1228  005C                     l1788:
  1229                           
  1230                           ;main.c: 228:             umidade_minima = umidade;
  1231  005C  0837               	movf	handleMenu@umidade+1,w
  1232  005D  00C0               	movwf	_umidade_minima+1
  1233  005E  0836               	movf	handleMenu@umidade,w
  1234  005F  00BF               	movwf	_umidade_minima
  1235                           
  1236                           ;main.c: 229:             setup_menu = 2;
  1237  0060  3002               	movlw	2
  1238  0061  00C3               	movwf	_setup_menu
  1239  0062  3000               	movlw	0
  1240  0063  00C4               	movwf	_setup_menu+1
  1241                           
  1242                           ;main.c: 230:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1243  0064  3003               	movlw	3
  1244  0065  1283               	bcf	3,5	;RP0=0, select bank0
  1245  0066  1303               	bcf	3,6	;RP1=0, select bank0
  1246  0067  00B3               	movwf	??_handleMenu+2
  1247  0068  308A               	movlw	138
  1248  0069  00B2               	movwf	??_handleMenu+1
  1249  006A  3055               	movlw	85
  1250  006B  00B1               	movwf	??_handleMenu
  1251  006C                     u1547:
  1252  006C  0BB1               	decfsz	??_handleMenu,f
  1253  006D  286C               	goto	u1547
  1254  006E  0BB2               	decfsz	??_handleMenu+1,f
  1255  006F  286C               	goto	u1547
  1256  0070  0BB3               	decfsz	??_handleMenu+2,f
  1257  0071  286C               	goto	u1547
  1258  0072                     l1790:
  1259                           
  1260                           ;main.c: 232:         if(!PORTBbits.RB3){
  1261  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1262  0073  1303               	bcf	3,6	;RP1=0, select bank0
  1263  0074  1986               	btfsc	6,3	;volatile
  1264  0075  2877               	goto	u1371
  1265  0076  2878               	goto	u1370
  1266  0077                     u1371:
  1267  0077  28A4               	goto	l1802
  1268  0078                     u1370:
  1269  0078                     l1792:
  1270                           
  1271                           ;main.c: 233:             umidade++;
  1272  0078  3001               	movlw	1
  1273  0079  07B6               	addwf	handleMenu@umidade,f
  1274  007A  1803               	skipnc
  1275  007B  0AB7               	incf	handleMenu@umidade+1,f
  1276  007C  3000               	movlw	0
  1277  007D  07B7               	addwf	handleMenu@umidade+1,f
  1278  007E                     l1794:
  1279                           
  1280                           ;main.c: 234:             if(umidade > 999) umidade = 0;
  1281  007E  0837               	movf	handleMenu@umidade+1,w
  1282  007F  3A80               	xorlw	128
  1283  0080  00FF               	movwf	btemp+1
  1284  0081  3083               	movlw	131
  1285  0082  027F               	subwf	btemp+1,w
  1286  0083  1D03               	skipz
  1287  0084  2887               	goto	u1385
  1288  0085  30E8               	movlw	232
  1289  0086  0236               	subwf	handleMenu@umidade,w
  1290  0087                     u1385:
  1291  0087  1C03               	skipc
  1292  0088  288A               	goto	u1381
  1293  0089  288B               	goto	u1380
  1294  008A                     u1381:
  1295  008A  288F               	goto	l1798
  1296  008B                     u1380:
  1297  008B                     l1796:
  1298  008B  1283               	bcf	3,5	;RP0=0, select bank0
  1299  008C  1303               	bcf	3,6	;RP1=0, select bank0
  1300  008D  01B6               	clrf	handleMenu@umidade
  1301  008E  01B7               	clrf	handleMenu@umidade+1
  1302  008F                     l1798:
  1303                           
  1304                           ;main.c: 235:             writeValor(umidade);
  1305  008F  1283               	bcf	3,5	;RP0=0, select bank0
  1306  0090  1303               	bcf	3,6	;RP1=0, select bank0
  1307  0091  0837               	movf	handleMenu@umidade+1,w
  1308  0092  00AC               	movwf	writeValor@valor+1
  1309  0093  0836               	movf	handleMenu@umidade,w
  1310  0094  00AB               	movwf	writeValor@valor
  1311  0095  120A  118A  2198  120A  118A  	fcall	_writeValor
  1312  009A                     l1800:
  1313                           
  1314                           ;main.c: 236:             _delay((unsigned long)((100)*(4000000/4000.0)));
  1315  009A  3082               	movlw	130
  1316  009B  1283               	bcf	3,5	;RP0=0, select bank0
  1317  009C  1303               	bcf	3,6	;RP1=0, select bank0
  1318  009D  00B2               	movwf	??_handleMenu+1
  1319  009E  30DD               	movlw	221
  1320  009F  00B1               	movwf	??_handleMenu
  1321  00A0                     u1557:
  1322  00A0  0BB1               	decfsz	??_handleMenu,f
  1323  00A1  28A0               	goto	u1557
  1324  00A2  0BB2               	decfsz	??_handleMenu+1,f
  1325  00A3  28A0               	goto	u1557
  1326  00A4                     l1802:
  1327                           
  1328                           ;main.c: 238:         if(!PORTBbits.RB4){
  1329  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1330  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1331  00A6  1A06               	btfsc	6,4	;volatile
  1332  00A7  28A9               	goto	u1391
  1333  00A8  28AA               	goto	u1390
  1334  00A9                     u1391:
  1335  00A9  28C9               	goto	l1814
  1336  00AA                     u1390:
  1337  00AA                     l1804:
  1338                           
  1339                           ;main.c: 239:             umidade--;
  1340  00AA  30FF               	movlw	255
  1341  00AB  07B6               	addwf	handleMenu@umidade,f
  1342  00AC  1803               	skipnc
  1343  00AD  0AB7               	incf	handleMenu@umidade+1,f
  1344  00AE  30FF               	movlw	255
  1345  00AF  07B7               	addwf	handleMenu@umidade+1,f
  1346  00B0                     l1806:
  1347                           
  1348                           ;main.c: 240:             if(umidade < 0) umidade = 0;
  1349  00B0  1FB7               	btfss	handleMenu@umidade+1,7
  1350  00B1  28B3               	goto	u1401
  1351  00B2  28B4               	goto	u1400
  1352  00B3                     u1401:
  1353  00B3  28B6               	goto	l1810
  1354  00B4                     u1400:
  1355  00B4                     l1808:
  1356  00B4  01B6               	clrf	handleMenu@umidade
  1357  00B5  01B7               	clrf	handleMenu@umidade+1
  1358  00B6                     l1810:
  1359                           
  1360                           ;main.c: 241:             writeValor(umidade);
  1361  00B6  0837               	movf	handleMenu@umidade+1,w
  1362  00B7  00AC               	movwf	writeValor@valor+1
  1363  00B8  0836               	movf	handleMenu@umidade,w
  1364  00B9  00AB               	movwf	writeValor@valor
  1365  00BA  120A  118A  2198  120A  118A  	fcall	_writeValor
  1366  00BF                     l1812:
  1367                           
  1368                           ;main.c: 242:             _delay((unsigned long)((100)*(4000000/4000.0)));
  1369  00BF  3082               	movlw	130
  1370  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1371  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1372  00C2  00B2               	movwf	??_handleMenu+1
  1373  00C3  30DD               	movlw	221
  1374  00C4  00B1               	movwf	??_handleMenu
  1375  00C5                     u1567:
  1376  00C5  0BB1               	decfsz	??_handleMenu,f
  1377  00C6  28C5               	goto	u1567
  1378  00C7  0BB2               	decfsz	??_handleMenu+1,f
  1379  00C8  28C5               	goto	u1567
  1380  00C9                     l1814:
  1381                           
  1382                           ;main.c: 221:     while(setup_menu == 1){
  1383  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  1384  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  1385  00CB  0343               	decf	_setup_menu,w
  1386  00CC  0444               	iorwf	_setup_menu+1,w
  1387  00CD  1903               	btfsc	3,2
  1388  00CE  28D0               	goto	u1411
  1389  00CF  28D1               	goto	u1410
  1390  00D0                     u1411:
  1391  00D0  2832               	goto	l148
  1392  00D1                     u1410:
  1393  00D1                     l1816:
  1394                           
  1395                           ;main.c: 245:     Lcd_Clear();
  1396  00D1  120A  118A  25F2  120A  118A  	fcall	_Lcd_Clear
  1397                           
  1398                           ;main.c: 246:     while(setup_menu == 2){
  1399  00D6  2975               	goto	l1860
  1400  00D7                     l156:
  1401  00D7  0064               	clrwdt	;# 
  1402  00D8                     l1818:
  1403                           
  1404                           ;main.c: 248:         _delay((unsigned long)((100)*(4000000/4000.0)));
  1405  00D8  3082               	movlw	130
  1406  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1407  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  1408  00DB  00B2               	movwf	??_handleMenu+1
  1409  00DC  30DD               	movlw	221
  1410  00DD  00B1               	movwf	??_handleMenu
  1411  00DE                     u1577:
  1412  00DE  0BB1               	decfsz	??_handleMenu,f
  1413  00DF  28DE               	goto	u1577
  1414  00E0  0BB2               	decfsz	??_handleMenu+1,f
  1415  00E1  28DE               	goto	u1577
  1416  00E2                     l1820:
  1417                           
  1418                           ;main.c: 249:         Lcd_Set_Cursor(1,1);
  1419  00E2  01F7               	clrf	Lcd_Set_Cursor@b
  1420  00E3  0AF7               	incf	Lcd_Set_Cursor@b,f
  1421  00E4  3001               	movlw	1
  1422  00E5  120A  118A  2327  120A  118A  	fcall	_Lcd_Set_Cursor
  1423  00EA                     l1822:
  1424                           
  1425                           ;main.c: 250:         Lcd_Write_String("NEW VOLUME:");
  1426  00EA  3010               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1427  00EB  120A  118A  245A  120A  118A  	fcall	_Lcd_Write_String
  1428  00F0                     l1824:
  1429                           
  1430                           ;main.c: 251:         writeValor(volume);
  1431  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  1432  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  1433  00F2  0835               	movf	handleMenu@volume+1,w
  1434  00F3  00AC               	movwf	writeValor@valor+1
  1435  00F4  0834               	movf	handleMenu@volume,w
  1436  00F5  00AB               	movwf	writeValor@valor
  1437  00F6  120A  118A  2198  120A  118A  	fcall	_writeValor
  1438  00FB                     l1826:
  1439                           
  1440                           ;main.c: 252:         if(!PORTBbits.RB2){
  1441  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1442  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  1443  00FD  1906               	btfsc	6,2	;volatile
  1444  00FE  2900               	goto	u1421
  1445  00FF  2901               	goto	u1420
  1446  0100                     u1421:
  1447  0100  291E               	goto	l1836
  1448  0101                     u1420:
  1449  0101                     l1828:
  1450                           
  1451                           ;main.c: 253:             water_volume = volume;
  1452  0101  0835               	movf	handleMenu@volume+1,w
  1453  0102  00BE               	movwf	_water_volume+1
  1454  0103  0834               	movf	handleMenu@volume,w
  1455  0104  00BD               	movwf	_water_volume
  1456  0105                     l1830:
  1457                           
  1458                           ;main.c: 254:             setupNewVolumeFlow();
  1459  0105  120A  118A  2540  120A  118A  	fcall	_setupNewVolumeFlow
  1460  010A                     l1832:
  1461                           
  1462                           ;main.c: 255:             setup_menu = 3;
  1463  010A  3003               	movlw	3
  1464  010B  1283               	bcf	3,5	;RP0=0, select bank0
  1465  010C  1303               	bcf	3,6	;RP1=0, select bank0
  1466  010D  00C3               	movwf	_setup_menu
  1467  010E  3000               	movlw	0
  1468  010F  00C4               	movwf	_setup_menu+1
  1469  0110                     l1834:
  1470                           
  1471                           ;main.c: 256:             _delay((unsigned long)((500)*(4000000/4000.0)));
  1472  0110  3003               	movlw	3
  1473  0111  1283               	bcf	3,5	;RP0=0, select bank0
  1474  0112  1303               	bcf	3,6	;RP1=0, select bank0
  1475  0113  00B3               	movwf	??_handleMenu+2
  1476  0114  308A               	movlw	138
  1477  0115  00B2               	movwf	??_handleMenu+1
  1478  0116  3055               	movlw	85
  1479  0117  00B1               	movwf	??_handleMenu
  1480  0118                     u1587:
  1481  0118  0BB1               	decfsz	??_handleMenu,f
  1482  0119  2918               	goto	u1587
  1483  011A  0BB2               	decfsz	??_handleMenu+1,f
  1484  011B  2918               	goto	u1587
  1485  011C  0BB3               	decfsz	??_handleMenu+2,f
  1486  011D  2918               	goto	u1587
  1487  011E                     l1836:
  1488                           
  1489                           ;main.c: 258:         if(!PORTBbits.RB3){
  1490  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1491  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1492  0120  1986               	btfsc	6,3	;volatile
  1493  0121  2923               	goto	u1431
  1494  0122  2924               	goto	u1430
  1495  0123                     u1431:
  1496  0123  2950               	goto	l1848
  1497  0124                     u1430:
  1498  0124                     l1838:
  1499                           
  1500                           ;main.c: 259:             volume++;
  1501  0124  3001               	movlw	1
  1502  0125  07B4               	addwf	handleMenu@volume,f
  1503  0126  1803               	skipnc
  1504  0127  0AB5               	incf	handleMenu@volume+1,f
  1505  0128  3000               	movlw	0
  1506  0129  07B5               	addwf	handleMenu@volume+1,f
  1507  012A                     l1840:
  1508                           
  1509                           ;main.c: 260:             if(volume > 999) volume = 0;
  1510  012A  0835               	movf	handleMenu@volume+1,w
  1511  012B  3A80               	xorlw	128
  1512  012C  00FF               	movwf	btemp+1
  1513  012D  3083               	movlw	131
  1514  012E  027F               	subwf	btemp+1,w
  1515  012F  1D03               	skipz
  1516  0130  2933               	goto	u1445
  1517  0131  30E8               	movlw	232
  1518  0132  0234               	subwf	handleMenu@volume,w
  1519  0133                     u1445:
  1520  0133  1C03               	skipc
  1521  0134  2936               	goto	u1441
  1522  0135  2937               	goto	u1440
  1523  0136                     u1441:
  1524  0136  293B               	goto	l1844
  1525  0137                     u1440:
  1526  0137                     l1842:
  1527  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1528  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1529  0139  01B4               	clrf	handleMenu@volume
  1530  013A  01B5               	clrf	handleMenu@volume+1
  1531  013B                     l1844:
  1532                           
  1533                           ;main.c: 261:             writeValor(volume);
  1534  013B  1283               	bcf	3,5	;RP0=0, select bank0
  1535  013C  1303               	bcf	3,6	;RP1=0, select bank0
  1536  013D  0835               	movf	handleMenu@volume+1,w
  1537  013E  00AC               	movwf	writeValor@valor+1
  1538  013F  0834               	movf	handleMenu@volume,w
  1539  0140  00AB               	movwf	writeValor@valor
  1540  0141  120A  118A  2198  120A  118A  	fcall	_writeValor
  1541  0146                     l1846:
  1542                           
  1543                           ;main.c: 262:             _delay((unsigned long)((100)*(4000000/4000.0)));
  1544  0146  3082               	movlw	130
  1545  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1546  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0149  00B2               	movwf	??_handleMenu+1
  1548  014A  30DD               	movlw	221
  1549  014B  00B1               	movwf	??_handleMenu
  1550  014C                     u1597:
  1551  014C  0BB1               	decfsz	??_handleMenu,f
  1552  014D  294C               	goto	u1597
  1553  014E  0BB2               	decfsz	??_handleMenu+1,f
  1554  014F  294C               	goto	u1597
  1555  0150                     l1848:
  1556                           
  1557                           ;main.c: 264:         if(!PORTBbits.RB4){
  1558  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1559  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1560  0152  1A06               	btfsc	6,4	;volatile
  1561  0153  2955               	goto	u1451
  1562  0154  2956               	goto	u1450
  1563  0155                     u1451:
  1564  0155  2975               	goto	l1860
  1565  0156                     u1450:
  1566  0156                     l1850:
  1567                           
  1568                           ;main.c: 265:             volume--;
  1569  0156  30FF               	movlw	255
  1570  0157  07B4               	addwf	handleMenu@volume,f
  1571  0158  1803               	skipnc
  1572  0159  0AB5               	incf	handleMenu@volume+1,f
  1573  015A  30FF               	movlw	255
  1574  015B  07B5               	addwf	handleMenu@volume+1,f
  1575  015C                     l1852:
  1576                           
  1577                           ;main.c: 266:             if(volume < 0) volume = 0;
  1578  015C  1FB5               	btfss	handleMenu@volume+1,7
  1579  015D  295F               	goto	u1461
  1580  015E  2960               	goto	u1460
  1581  015F                     u1461:
  1582  015F  2962               	goto	l1856
  1583  0160                     u1460:
  1584  0160                     l1854:
  1585  0160  01B4               	clrf	handleMenu@volume
  1586  0161  01B5               	clrf	handleMenu@volume+1
  1587  0162                     l1856:
  1588                           
  1589                           ;main.c: 267:             writeValor(volume);
  1590  0162  0835               	movf	handleMenu@volume+1,w
  1591  0163  00AC               	movwf	writeValor@valor+1
  1592  0164  0834               	movf	handleMenu@volume,w
  1593  0165  00AB               	movwf	writeValor@valor
  1594  0166  120A  118A  2198  120A  118A  	fcall	_writeValor
  1595  016B                     l1858:
  1596                           
  1597                           ;main.c: 268:             _delay((unsigned long)((100)*(4000000/4000.0)));
  1598  016B  3082               	movlw	130
  1599  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1600  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1601  016E  00B2               	movwf	??_handleMenu+1
  1602  016F  30DD               	movlw	221
  1603  0170  00B1               	movwf	??_handleMenu
  1604  0171                     u1607:
  1605  0171  0BB1               	decfsz	??_handleMenu,f
  1606  0172  2971               	goto	u1607
  1607  0173  0BB2               	decfsz	??_handleMenu+1,f
  1608  0174  2971               	goto	u1607
  1609  0175                     l1860:
  1610                           
  1611                           ;main.c: 246:     while(setup_menu == 2){
  1612  0175  3002               	movlw	2
  1613  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1614  0177  1303               	bcf	3,6	;RP1=0, select bank0
  1615  0178  0643               	xorwf	_setup_menu,w
  1616  0179  0444               	iorwf	_setup_menu+1,w
  1617  017A  1903               	btfsc	3,2
  1618  017B  297D               	goto	u1471
  1619  017C  297E               	goto	u1470
  1620  017D                     u1471:
  1621  017D  28D7               	goto	l156
  1622  017E                     u1470:
  1623  017E                     l1862:
  1624                           
  1625                           ;main.c: 271:     Lcd_Clear();
  1626  017E  120A  118A  25F2  120A  118A  	fcall	_Lcd_Clear
  1627                           
  1628                           ;main.c: 272:     while(setup_menu == 3){
  1629  0183  2989               	goto	l1864
  1630  0184                     l164:
  1631  0184  0064               	clrwdt	;# 
  1632                           
  1633                           ;main.c: 274:         PORTBbits.RB5 = 0;
  1634  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1635  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1636  0187  1286               	bcf	6,5	;volatile
  1637                           
  1638                           ;main.c: 275:         break;
  1639  0188  2992               	goto	l1866
  1640  0189                     l1864:
  1641                           
  1642                           ;main.c: 272:     while(setup_menu == 3){
  1643  0189  3003               	movlw	3
  1644  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1645  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1646  018C  0643               	xorwf	_setup_menu,w
  1647  018D  0444               	iorwf	_setup_menu+1,w
  1648  018E  1903               	btfsc	3,2
  1649  018F  2991               	goto	u1481
  1650  0190  2992               	goto	u1480
  1651  0191                     u1481:
  1652  0191  2984               	goto	l164
  1653  0192                     u1480:
  1654  0192                     l1866:
  1655                           
  1656                           ;main.c: 277:     Lcd_Clear();
  1657  0192  120A  118A  25F2  120A  118A  	fcall	_Lcd_Clear
  1658  0197                     l166:
  1659  0197  0008               	return
  1660  0198                     __end_of_handleMenu:
  1661                           
  1662                           	psect	text6
  1663  0198                     __ptext6:	
  1664 ;; *************** function _writeValor *****************
  1665 ;; Defined at:
  1666 ;;		line 204 in file "main.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  valor           2   11[BANK0 ] int 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  unidade         1   16[BANK0 ] unsigned char 
  1671 ;;  dezena          1   15[BANK0 ] unsigned char 
  1672 ;;  centena         1   14[BANK0 ] unsigned char 
  1673 ;; Return value:  Size  Location     Type
  1674 ;;                  1    wreg      void 
  1675 ;; Registers used:
  1676 ;;		wreg, status,2, status,0, pclath, cstack
  1677 ;; Tracked objects:
  1678 ;;		On entry : 0/0
  1679 ;;		On exit  : 0/0
  1680 ;;		Unchanged: 0/0
  1681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1682 ;;      Params:         0       2       0       0       0
  1683 ;;      Locals:         0       3       0       0       0
  1684 ;;      Temps:          0       1       0       0       0
  1685 ;;      Totals:         0       6       0       0       0
  1686 ;;Total ram usage:        6 bytes
  1687 ;; Hardware stack levels used: 1
  1688 ;; Hardware stack levels required when called: 6
  1689 ;; This function calls:
  1690 ;;		_Lcd_Set_Cursor
  1691 ;;		_Lcd_Write_Char
  1692 ;;		___awdiv
  1693 ;;		___awmod
  1694 ;; This function is called by:
  1695 ;;		_handleMenu
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699  0198                     _writeValor:	
  1700                           ;psect for function _writeValor
  1701                           
  1702  0198                     l1772:	
  1703                           ;incstack = 0
  1704 ;; hardware stack exceeded
  1705                           ; Regs used in _writeValor: [wreg+status,2+status,0+pclath+cstack]
  1706                           
  1707                           
  1708                           ;main.c: 204: void writeValor(int valor);main.c: 205: {;main.c: 206:     char centena = 
      +                          valor/100 + 48;
  1709  0198  3064               	movlw	100
  1710  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1711  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1712  019B  00A2               	movwf	___awdiv@divisor
  1713  019C  3000               	movlw	0
  1714  019D  00A3               	movwf	___awdiv@divisor+1
  1715  019E  082C               	movf	writeValor@valor+1,w
  1716  019F  00A5               	movwf	___awdiv@dividend+1
  1717  01A0  082B               	movf	writeValor@valor,w
  1718  01A1  00A4               	movwf	___awdiv@dividend
  1719  01A2  120A  118A  2206  120A  118A  	fcall	___awdiv
  1720  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  1721  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  1722  01A9  0822               	movf	?___awdiv,w
  1723  01AA  3E30               	addlw	48
  1724  01AB  00AD               	movwf	??_writeValor
  1725  01AC  082D               	movf	??_writeValor,w
  1726  01AD  00AE               	movwf	writeValor@centena
  1727                           
  1728                           ;main.c: 207:     char dezena = (valor%100)/10 + 48;
  1729  01AE  300A               	movlw	10
  1730  01AF  00A2               	movwf	___awdiv@divisor
  1731  01B0  3000               	movlw	0
  1732  01B1  00A3               	movwf	___awdiv@divisor+1
  1733  01B2  082C               	movf	writeValor@valor+1,w
  1734  01B3  00F6               	movwf	___awmod@dividend+1
  1735  01B4  082B               	movf	writeValor@valor,w
  1736  01B5  00F5               	movwf	___awmod@dividend
  1737  01B6  3064               	movlw	100
  1738  01B7  00F3               	movwf	___awmod@divisor
  1739  01B8  3000               	movlw	0
  1740  01B9  00F4               	movwf	___awmod@divisor+1
  1741  01BA  120A  118A  22CC  120A  118A  	fcall	___awmod
  1742  01BF  0874               	movf	?___awmod+1,w
  1743  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1744  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1745  01C2  00A5               	movwf	___awdiv@dividend+1
  1746  01C3  0873               	movf	?___awmod,w
  1747  01C4  00A4               	movwf	___awdiv@dividend
  1748  01C5  120A  118A  2206  120A  118A  	fcall	___awdiv
  1749  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  1750  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  1751  01CC  0822               	movf	?___awdiv,w
  1752  01CD  3E30               	addlw	48
  1753  01CE  00AD               	movwf	??_writeValor
  1754  01CF  082D               	movf	??_writeValor,w
  1755  01D0  00AF               	movwf	writeValor@dezena
  1756                           
  1757                           ;main.c: 208:     char unidade = valor%10 + 48;
  1758  01D1  300A               	movlw	10
  1759  01D2  00F3               	movwf	___awmod@divisor
  1760  01D3  3000               	movlw	0
  1761  01D4  00F4               	movwf	___awmod@divisor+1
  1762  01D5  082C               	movf	writeValor@valor+1,w
  1763  01D6  00F6               	movwf	___awmod@dividend+1
  1764  01D7  082B               	movf	writeValor@valor,w
  1765  01D8  00F5               	movwf	___awmod@dividend
  1766  01D9  120A  118A  22CC  120A  118A  	fcall	___awmod
  1767  01DE  0873               	movf	?___awmod,w
  1768  01DF  3E30               	addlw	48
  1769  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  1770  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  1771  01E2  00AD               	movwf	??_writeValor
  1772  01E3  082D               	movf	??_writeValor,w
  1773  01E4  00B0               	movwf	writeValor@unidade
  1774                           
  1775                           ;main.c: 209:     Lcd_Set_Cursor(2,1);
  1776  01E5  01F7               	clrf	Lcd_Set_Cursor@b
  1777  01E6  0AF7               	incf	Lcd_Set_Cursor@b,f
  1778  01E7  3002               	movlw	2
  1779  01E8  120A  118A  2327  120A  118A  	fcall	_Lcd_Set_Cursor
  1780                           
  1781                           ;main.c: 210:     Lcd_Write_Char(centena);
  1782  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  1783  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  1784  01EF  082E               	movf	writeValor@centena,w
  1785  01F0  120A  118A  23B8  120A  118A  	fcall	_Lcd_Write_Char
  1786                           
  1787                           ;main.c: 211:     Lcd_Write_Char(dezena);
  1788  01F5  1283               	bcf	3,5	;RP0=0, select bank0
  1789  01F6  1303               	bcf	3,6	;RP1=0, select bank0
  1790  01F7  082F               	movf	writeValor@dezena,w
  1791  01F8  120A  118A  23B8  120A  118A  	fcall	_Lcd_Write_Char
  1792                           
  1793                           ;main.c: 212:     Lcd_Write_Char(unidade);
  1794  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  1795  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  1796  01FF  0830               	movf	writeValor@unidade,w
  1797  0200  120A  118A  23B8  120A  118A  	fcall	_Lcd_Write_Char
  1798  0205                     l144:
  1799  0205  0008               	return
  1800  0206                     __end_of_writeValor:
  1801                           
  1802                           	psect	text7
  1803  02CC                     __ptext7:	
  1804 ;; *************** function ___awmod *****************
  1805 ;; Defined at:
  1806 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;  divisor         2    3[COMMON] int 
  1809 ;;  dividend        2    5[COMMON] int 
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;  sign            1    1[BANK0 ] unsigned char 
  1812 ;;  counter         1    0[BANK0 ] unsigned char 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  2    3[COMMON] int 
  1815 ;; Registers used:
  1816 ;;		wreg, status,2, status,0
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1822 ;;      Params:         4       0       0       0       0
  1823 ;;      Locals:         0       2       0       0       0
  1824 ;;      Temps:          1       0       0       0       0
  1825 ;;      Totals:         5       2       0       0       0
  1826 ;;Total ram usage:        7 bytes
  1827 ;; Hardware stack levels used: 1
  1828 ;; Hardware stack levels required when called: 3
  1829 ;; This function calls:
  1830 ;;		Nothing
  1831 ;; This function is called by:
  1832 ;;		_writeValor
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836  02CC                     ___awmod:	
  1837                           ;psect for function ___awmod
  1838                           
  1839  02CC                     l1720:	
  1840                           ;incstack = 0
  1841                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1842                           
  1843  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  1844  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  1845  02CE  01A1               	clrf	___awmod@sign
  1846  02CF                     l1722:
  1847  02CF  1FF6               	btfss	___awmod@dividend+1,7
  1848  02D0  2AD2               	goto	u1261
  1849  02D1  2AD3               	goto	u1260
  1850  02D2                     u1261:
  1851  02D2  2ADA               	goto	l1728
  1852  02D3                     u1260:
  1853  02D3                     l1724:
  1854  02D3  09F5               	comf	___awmod@dividend,f
  1855  02D4  09F6               	comf	___awmod@dividend+1,f
  1856  02D5  0AF5               	incf	___awmod@dividend,f
  1857  02D6  1903               	skipnz
  1858  02D7  0AF6               	incf	___awmod@dividend+1,f
  1859  02D8                     l1726:
  1860  02D8  01A1               	clrf	___awmod@sign
  1861  02D9  0AA1               	incf	___awmod@sign,f
  1862  02DA                     l1728:
  1863  02DA  1FF4               	btfss	___awmod@divisor+1,7
  1864  02DB  2ADD               	goto	u1271
  1865  02DC  2ADE               	goto	u1270
  1866  02DD                     u1271:
  1867  02DD  2AE3               	goto	l1732
  1868  02DE                     u1270:
  1869  02DE                     l1730:
  1870  02DE  09F3               	comf	___awmod@divisor,f
  1871  02DF  09F4               	comf	___awmod@divisor+1,f
  1872  02E0  0AF3               	incf	___awmod@divisor,f
  1873  02E1  1903               	skipnz
  1874  02E2  0AF4               	incf	___awmod@divisor+1,f
  1875  02E3                     l1732:
  1876  02E3  0873               	movf	___awmod@divisor,w
  1877  02E4  0474               	iorwf	___awmod@divisor+1,w
  1878  02E5  1903               	btfsc	3,2
  1879  02E6  2AE8               	goto	u1281
  1880  02E7  2AE9               	goto	u1280
  1881  02E8                     u1281:
  1882  02E8  2B18               	goto	l1750
  1883  02E9                     u1280:
  1884  02E9                     l1734:
  1885  02E9  01A0               	clrf	___awmod@counter
  1886  02EA  0AA0               	incf	___awmod@counter,f
  1887  02EB  2AF7               	goto	l1740
  1888  02EC                     l1736:
  1889  02EC  3001               	movlw	1
  1890  02ED                     u1295:
  1891  02ED  1003               	clrc
  1892  02EE  0DF3               	rlf	___awmod@divisor,f
  1893  02EF  0DF4               	rlf	___awmod@divisor+1,f
  1894  02F0  3EFF               	addlw	-1
  1895  02F1  1D03               	skipz
  1896  02F2  2AED               	goto	u1295
  1897  02F3                     l1738:
  1898  02F3  3001               	movlw	1
  1899  02F4  00F7               	movwf	??___awmod
  1900  02F5  0877               	movf	??___awmod,w
  1901  02F6  07A0               	addwf	___awmod@counter,f
  1902  02F7                     l1740:
  1903  02F7  1FF4               	btfss	___awmod@divisor+1,7
  1904  02F8  2AFA               	goto	u1301
  1905  02F9  2AFB               	goto	u1300
  1906  02FA                     u1301:
  1907  02FA  2AEC               	goto	l1736
  1908  02FB                     u1300:
  1909  02FB                     l1742:
  1910  02FB  0874               	movf	___awmod@divisor+1,w
  1911  02FC  0276               	subwf	___awmod@dividend+1,w
  1912  02FD  1D03               	skipz
  1913  02FE  2B01               	goto	u1315
  1914  02FF  0873               	movf	___awmod@divisor,w
  1915  0300  0275               	subwf	___awmod@dividend,w
  1916  0301                     u1315:
  1917  0301  1C03               	skipc
  1918  0302  2B04               	goto	u1311
  1919  0303  2B05               	goto	u1310
  1920  0304                     u1311:
  1921  0304  2B0B               	goto	l1746
  1922  0305                     u1310:
  1923  0305                     l1744:
  1924  0305  0873               	movf	___awmod@divisor,w
  1925  0306  02F5               	subwf	___awmod@dividend,f
  1926  0307  0874               	movf	___awmod@divisor+1,w
  1927  0308  1C03               	skipc
  1928  0309  03F6               	decf	___awmod@dividend+1,f
  1929  030A  02F6               	subwf	___awmod@dividend+1,f
  1930  030B                     l1746:
  1931  030B  3001               	movlw	1
  1932  030C                     u1325:
  1933  030C  1003               	clrc
  1934  030D  0CF4               	rrf	___awmod@divisor+1,f
  1935  030E  0CF3               	rrf	___awmod@divisor,f
  1936  030F  3EFF               	addlw	-1
  1937  0310  1D03               	skipz
  1938  0311  2B0C               	goto	u1325
  1939  0312                     l1748:
  1940  0312  3001               	movlw	1
  1941  0313  02A0               	subwf	___awmod@counter,f
  1942  0314  1D03               	btfss	3,2
  1943  0315  2B17               	goto	u1331
  1944  0316  2B18               	goto	u1330
  1945  0317                     u1331:
  1946  0317  2AFB               	goto	l1742
  1947  0318                     u1330:
  1948  0318                     l1750:
  1949  0318  0821               	movf	___awmod@sign,w
  1950  0319  1903               	btfsc	3,2
  1951  031A  2B1C               	goto	u1341
  1952  031B  2B1D               	goto	u1340
  1953  031C                     u1341:
  1954  031C  2B22               	goto	l1754
  1955  031D                     u1340:
  1956  031D                     l1752:
  1957  031D  09F5               	comf	___awmod@dividend,f
  1958  031E  09F6               	comf	___awmod@dividend+1,f
  1959  031F  0AF5               	incf	___awmod@dividend,f
  1960  0320  1903               	skipnz
  1961  0321  0AF6               	incf	___awmod@dividend+1,f
  1962  0322                     l1754:
  1963  0322  0876               	movf	___awmod@dividend+1,w
  1964  0323  00F4               	movwf	?___awmod+1
  1965  0324  0875               	movf	___awmod@dividend,w
  1966  0325  00F3               	movwf	?___awmod
  1967  0326                     l444:
  1968  0326  0008               	return
  1969  0327                     __end_of___awmod:
  1970                           
  1971                           	psect	text8
  1972  0327                     __ptext8:	
  1973 ;; *************** function _Lcd_Set_Cursor *****************
  1974 ;; Defined at:
  1975 ;;		line 41 in file "./lcd.h"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;  a               1    wreg     unsigned char 
  1978 ;;  b               1    7[COMMON] unsigned char 
  1979 ;; Auto vars:     Size  Location     Type
  1980 ;;  a               1    2[BANK0 ] unsigned char 
  1981 ;;  temp            1    5[BANK0 ] unsigned char 
  1982 ;;  y               1    4[BANK0 ] unsigned char 
  1983 ;;  z               1    3[BANK0 ] unsigned char 
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		wreg, status,2, status,0, pclath, cstack
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1993 ;;      Params:         1       0       0       0       0
  1994 ;;      Locals:         0       4       0       0       0
  1995 ;;      Temps:          0       2       0       0       0
  1996 ;;      Totals:         1       6       0       0       0
  1997 ;;Total ram usage:        7 bytes
  1998 ;; Hardware stack levels used: 1
  1999 ;; Hardware stack levels required when called: 5
  2000 ;; This function calls:
  2001 ;;		_Lcd_Cmd
  2002 ;; This function is called by:
  2003 ;;		_writeValor
  2004 ;;		_handleMenu
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008  0327                     _Lcd_Set_Cursor:	
  2009                           ;psect for function _Lcd_Set_Cursor
  2010                           
  2011                           
  2012                           ;incstack = 0
  2013 ;; hardware stack exceeded
  2014                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2015                           ;Lcd_Set_Cursor@a stored from wreg
  2016  0327  1283               	bcf	3,5	;RP0=0, select bank0
  2017  0328  1303               	bcf	3,6	;RP1=0, select bank0
  2018  0329  00A2               	movwf	Lcd_Set_Cursor@a
  2019  032A                     l1674:
  2020                           
  2021                           ;./lcd.h: 41: void Lcd_Set_Cursor(char a, char b);./lcd.h: 42: {;./lcd.h: 43:  char temp
      +                          ,z,y;;./lcd.h: 44:  if(a == 1)
  2022  032A  0322               	decf	Lcd_Set_Cursor@a,w
  2023  032B  1D03               	btfss	3,2
  2024  032C  2B2E               	goto	u1211
  2025  032D  2B2F               	goto	u1210
  2026  032E                     u1211:
  2027  032E  2B54               	goto	l1684
  2028  032F                     u1210:
  2029  032F                     l1676:
  2030                           
  2031                           ;./lcd.h: 45:  {;./lcd.h: 46:    temp = 0x80 + b - 1;
  2032  032F  0877               	movf	Lcd_Set_Cursor@b,w
  2033  0330  3E7F               	addlw	127
  2034  0331  00A0               	movwf	??_Lcd_Set_Cursor
  2035  0332  0820               	movf	??_Lcd_Set_Cursor,w
  2036  0333  00A5               	movwf	Lcd_Set_Cursor@temp
  2037                           
  2038                           ;./lcd.h: 47:   z = temp>>4;
  2039  0334  0825               	movf	Lcd_Set_Cursor@temp,w
  2040  0335  00A0               	movwf	??_Lcd_Set_Cursor
  2041  0336  3004               	movlw	4
  2042  0337                     u1225:
  2043  0337  1003               	clrc
  2044  0338  0CA0               	rrf	??_Lcd_Set_Cursor,f
  2045  0339  3EFF               	addlw	-1
  2046  033A  1D03               	skipz
  2047  033B  2B37               	goto	u1225
  2048  033C  0820               	movf	??_Lcd_Set_Cursor,w
  2049  033D  00A1               	movwf	??_Lcd_Set_Cursor+1
  2050  033E  0821               	movf	??_Lcd_Set_Cursor+1,w
  2051  033F  00A3               	movwf	Lcd_Set_Cursor@z
  2052  0340                     l1678:
  2053                           
  2054                           ;./lcd.h: 48:   y = temp & 0x0F;
  2055  0340  0825               	movf	Lcd_Set_Cursor@temp,w
  2056  0341  390F               	andlw	15
  2057  0342  00A0               	movwf	??_Lcd_Set_Cursor
  2058  0343  0820               	movf	??_Lcd_Set_Cursor,w
  2059  0344  00A4               	movwf	Lcd_Set_Cursor@y
  2060  0345                     l1680:
  2061                           
  2062                           ;./lcd.h: 49:   Lcd_Cmd(z);
  2063  0345  0823               	movf	Lcd_Set_Cursor@z,w
  2064  0346  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  2065  034B                     l1682:
  2066                           
  2067                           ;./lcd.h: 50:   Lcd_Cmd(y);
  2068  034B  1283               	bcf	3,5	;RP0=0, select bank0
  2069  034C  1303               	bcf	3,6	;RP1=0, select bank0
  2070  034D  0824               	movf	Lcd_Set_Cursor@y,w
  2071  034E  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  2072                           
  2073                           ;./lcd.h: 51:  }
  2074  0353  2B7E               	goto	l77
  2075  0354                     l1684:
  2076  0354  3002               	movlw	2
  2077  0355  0622               	xorwf	Lcd_Set_Cursor@a,w
  2078  0356  1D03               	btfss	3,2
  2079  0357  2B59               	goto	u1231
  2080  0358  2B5A               	goto	u1230
  2081  0359                     u1231:
  2082  0359  2B7E               	goto	l77
  2083  035A                     u1230:
  2084  035A                     l1686:
  2085                           
  2086                           ;./lcd.h: 53:  {;./lcd.h: 54:   temp = 0xC0 + b - 1;
  2087  035A  0877               	movf	Lcd_Set_Cursor@b,w
  2088  035B  3EBF               	addlw	191
  2089  035C  00A0               	movwf	??_Lcd_Set_Cursor
  2090  035D  0820               	movf	??_Lcd_Set_Cursor,w
  2091  035E  00A5               	movwf	Lcd_Set_Cursor@temp
  2092                           
  2093                           ;./lcd.h: 55:   z = temp>>4;
  2094  035F  0825               	movf	Lcd_Set_Cursor@temp,w
  2095  0360  00A0               	movwf	??_Lcd_Set_Cursor
  2096  0361  3004               	movlw	4
  2097  0362                     u1245:
  2098  0362  1003               	clrc
  2099  0363  0CA0               	rrf	??_Lcd_Set_Cursor,f
  2100  0364  3EFF               	addlw	-1
  2101  0365  1D03               	skipz
  2102  0366  2B62               	goto	u1245
  2103  0367  0820               	movf	??_Lcd_Set_Cursor,w
  2104  0368  00A1               	movwf	??_Lcd_Set_Cursor+1
  2105  0369  0821               	movf	??_Lcd_Set_Cursor+1,w
  2106  036A  00A3               	movwf	Lcd_Set_Cursor@z
  2107  036B                     l1688:
  2108                           
  2109                           ;./lcd.h: 56:   y = temp & 0x0F;
  2110  036B  0825               	movf	Lcd_Set_Cursor@temp,w
  2111  036C  390F               	andlw	15
  2112  036D  00A0               	movwf	??_Lcd_Set_Cursor
  2113  036E  0820               	movf	??_Lcd_Set_Cursor,w
  2114  036F  00A4               	movwf	Lcd_Set_Cursor@y
  2115  0370                     l1690:
  2116                           
  2117                           ;./lcd.h: 57:   Lcd_Cmd(z);
  2118  0370  0823               	movf	Lcd_Set_Cursor@z,w
  2119  0371  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  2120  0376                     l1692:
  2121                           
  2122                           ;./lcd.h: 58:   Lcd_Cmd(y);
  2123  0376  1283               	bcf	3,5	;RP0=0, select bank0
  2124  0377  1303               	bcf	3,6	;RP1=0, select bank0
  2125  0378  0824               	movf	Lcd_Set_Cursor@y,w
  2126  0379  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  2127  037E                     l77:
  2128  037E  0008               	return
  2129  037F                     __end_of_Lcd_Set_Cursor:
  2130                           
  2131                           	psect	text9
  2132  045A                     __ptext9:	
  2133 ;; *************** function _Lcd_Write_String *****************
  2134 ;; Defined at:
  2135 ;;		line 97 in file "./lcd.h"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  a               1    wreg     PTR unsigned char 
  2138 ;;		 -> STR_2(12), STR_1(15), 
  2139 ;; Auto vars:     Size  Location     Type
  2140 ;;  a               1    2[BANK0 ] PTR unsigned char 
  2141 ;;		 -> STR_2(12), STR_1(15), 
  2142 ;;  i               2    0[BANK0 ] int 
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2152 ;;      Params:         0       0       0       0       0
  2153 ;;      Locals:         0       3       0       0       0
  2154 ;;      Temps:          0       0       0       0       0
  2155 ;;      Totals:         0       3       0       0       0
  2156 ;;Total ram usage:        3 bytes
  2157 ;; Hardware stack levels used: 1
  2158 ;; Hardware stack levels required when called: 5
  2159 ;; This function calls:
  2160 ;;		_Lcd_Write_Char
  2161 ;; This function is called by:
  2162 ;;		_handleMenu
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166  045A                     _Lcd_Write_String:	
  2167                           ;psect for function _Lcd_Write_String
  2168                           
  2169                           
  2170                           ;incstack = 0
  2171 ;; using string table level
  2172                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2173                           ;Lcd_Write_String@a stored from wreg
  2174  045A  1283               	bcf	3,5	;RP0=0, select bank0
  2175  045B  1303               	bcf	3,6	;RP1=0, select bank0
  2176  045C  00A2               	movwf	Lcd_Write_String@a
  2177  045D                     l1760:
  2178                           
  2179                           ;./lcd.h: 97: void Lcd_Write_String(char *a);./lcd.h: 98: {;./lcd.h: 99:  int i;;./lcd.h
      +                          : 100:  for(i=0;a[i]!='\0';i++)
  2180  045D  01A0               	clrf	Lcd_Write_String@i
  2181  045E  01A1               	clrf	Lcd_Write_String@i+1
  2182  045F  2C75               	goto	l1766
  2183  0460                     l1762:
  2184                           
  2185                           ;./lcd.h: 101:     Lcd_Write_Char(a[i]);
  2186  0460  0820               	movf	Lcd_Write_String@i,w
  2187  0461  0722               	addwf	Lcd_Write_String@a,w
  2188  0462  0084               	movwf	4
  2189  0463  120A  118A  2500  120A  118A  	fcall	stringdir
  2190  0468  120A  118A  23B8  120A  118A  	fcall	_Lcd_Write_Char
  2191  046D                     l1764:
  2192  046D  3001               	movlw	1
  2193  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2194  046F  1303               	bcf	3,6	;RP1=0, select bank0
  2195  0470  07A0               	addwf	Lcd_Write_String@i,f
  2196  0471  1803               	skipnc
  2197  0472  0AA1               	incf	Lcd_Write_String@i+1,f
  2198  0473  3000               	movlw	0
  2199  0474  07A1               	addwf	Lcd_Write_String@i+1,f
  2200  0475                     l1766:
  2201  0475  0820               	movf	Lcd_Write_String@i,w
  2202  0476  0722               	addwf	Lcd_Write_String@a,w
  2203  0477  0084               	movwf	4
  2204  0478  120A  118A  2500  120A  118A  	fcall	stringdir
  2205  047D  3A00               	xorlw	0
  2206  047E  1D03               	skipz
  2207  047F  2C81               	goto	u1351
  2208  0480  2C82               	goto	u1350
  2209  0481                     u1351:
  2210  0481  2C60               	goto	l1762
  2211  0482                     u1350:
  2212  0482                     l89:
  2213  0482  0008               	return
  2214  0483                     __end_of_Lcd_Write_String:
  2215                           
  2216                           	psect	text10
  2217  03B8                     __ptext10:	
  2218 ;; *************** function _Lcd_Write_Char *****************
  2219 ;; Defined at:
  2220 ;;		line 81 in file "./lcd.h"
  2221 ;; Parameters:    Size  Location     Type
  2222 ;;  a               1    wreg     unsigned char 
  2223 ;; Auto vars:     Size  Location     Type
  2224 ;;  a               1    7[COMMON] unsigned char 
  2225 ;;  y               1    6[COMMON] unsigned char 
  2226 ;;  temp            1    5[COMMON] unsigned char 
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  1    wreg      void 
  2229 ;; Registers used:
  2230 ;;		wreg, status,2, status,0, pclath, cstack
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2236 ;;      Params:         0       0       0       0       0
  2237 ;;      Locals:         3       0       0       0       0
  2238 ;;      Temps:          1       0       0       0       0
  2239 ;;      Totals:         4       0       0       0       0
  2240 ;;Total ram usage:        4 bytes
  2241 ;; Hardware stack levels used: 1
  2242 ;; Hardware stack levels required when called: 4
  2243 ;; This function calls:
  2244 ;;		_Lcd_Port
  2245 ;; This function is called by:
  2246 ;;		_Lcd_Write_String
  2247 ;;		_writeValor
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251  03B8                     _Lcd_Write_Char:	
  2252                           ;psect for function _Lcd_Write_Char
  2253                           
  2254                           
  2255                           ;incstack = 0
  2256                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2257                           ;Lcd_Write_Char@a stored from wreg
  2258  03B8  00F7               	movwf	Lcd_Write_Char@a
  2259  03B9                     l1694:
  2260                           
  2261                           ;./lcd.h: 81: void Lcd_Write_Char(char a);./lcd.h: 82: {;./lcd.h: 83:    char temp,y;;./
      +                          lcd.h: 84:    temp = a&0x0F;
  2262  03B9  0877               	movf	Lcd_Write_Char@a,w
  2263  03BA  390F               	andlw	15
  2264  03BB  00F4               	movwf	??_Lcd_Write_Char
  2265  03BC  0874               	movf	??_Lcd_Write_Char,w
  2266  03BD  00F5               	movwf	Lcd_Write_Char@temp
  2267                           
  2268                           ;./lcd.h: 85:    y = a&0xF0;
  2269  03BE  0877               	movf	Lcd_Write_Char@a,w
  2270  03BF  39F0               	andlw	240
  2271  03C0  00F4               	movwf	??_Lcd_Write_Char
  2272  03C1  0874               	movf	??_Lcd_Write_Char,w
  2273  03C2  00F6               	movwf	Lcd_Write_Char@y
  2274  03C3                     l1696:
  2275                           
  2276                           ;./lcd.h: 86:    RD2 = 1;
  2277  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  2278  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  2279  03C5  1508               	bsf	8,2	;volatile
  2280  03C6                     l1698:
  2281                           
  2282                           ;./lcd.h: 87:    Lcd_Port(y>>4);
  2283  03C6  0876               	movf	Lcd_Write_Char@y,w
  2284  03C7  00F4               	movwf	??_Lcd_Write_Char
  2285  03C8  3004               	movlw	4
  2286  03C9                     u1255:
  2287  03C9  1003               	clrc
  2288  03CA  0CF4               	rrf	??_Lcd_Write_Char,f
  2289  03CB  3EFF               	addlw	-1
  2290  03CC  1D03               	skipz
  2291  03CD  2BC9               	goto	u1255
  2292  03CE  0874               	movf	??_Lcd_Write_Char,w
  2293  03CF  120A  118A  24CA  120A  118A  	fcall	_Lcd_Port
  2294  03D4                     l1700:
  2295                           
  2296                           ;./lcd.h: 88:    RD3 = 1;
  2297  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  2298  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  2299  03D6  1588               	bsf	8,3	;volatile
  2300  03D7                     l1702:
  2301                           
  2302                           ;./lcd.h: 89:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2303  03D7  300D               	movlw	13
  2304  03D8  00F4               	movwf	??_Lcd_Write_Char
  2305  03D9                     u1617:
  2306  03D9  0BF4               	decfsz	??_Lcd_Write_Char,f
  2307  03DA  2BD9               	goto	u1617
  2308  03DB                     l1704:
  2309                           
  2310                           ;./lcd.h: 90:    RD3 = 0;
  2311  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2312  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2313  03DD  1188               	bcf	8,3	;volatile
  2314  03DE                     l1706:
  2315                           
  2316                           ;./lcd.h: 91:    Lcd_Port(temp);
  2317  03DE  0875               	movf	Lcd_Write_Char@temp,w
  2318  03DF  120A  118A  24CA  120A  118A  	fcall	_Lcd_Port
  2319  03E4                     l1708:
  2320                           
  2321                           ;./lcd.h: 92:    RD3 = 1;
  2322  03E4  1283               	bcf	3,5	;RP0=0, select bank0
  2323  03E5  1303               	bcf	3,6	;RP1=0, select bank0
  2324  03E6  1588               	bsf	8,3	;volatile
  2325  03E7                     l1710:
  2326                           
  2327                           ;./lcd.h: 93:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  2328  03E7  300D               	movlw	13
  2329  03E8  00F4               	movwf	??_Lcd_Write_Char
  2330  03E9                     u1627:
  2331  03E9  0BF4               	decfsz	??_Lcd_Write_Char,f
  2332  03EA  2BE9               	goto	u1627
  2333  03EB                     l1712:
  2334                           
  2335                           ;./lcd.h: 94:    RD3 = 0;
  2336  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  2337  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  2338  03ED  1188               	bcf	8,3	;volatile
  2339  03EE                     l83:
  2340  03EE  0008               	return
  2341  03EF                     __end_of_Lcd_Write_Char:
  2342                           
  2343                           	psect	text11
  2344  05F2                     __ptext11:	
  2345 ;; *************** function _Lcd_Clear *****************
  2346 ;; Defined at:
  2347 ;;		line 35 in file "./lcd.h"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, status,2, status,0, pclath, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2361 ;;      Params:         0       0       0       0       0
  2362 ;;      Locals:         0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0
  2364 ;;      Totals:         0       0       0       0       0
  2365 ;;Total ram usage:        0 bytes
  2366 ;; Hardware stack levels used: 1
  2367 ;; Hardware stack levels required when called: 5
  2368 ;; This function calls:
  2369 ;;		_Lcd_Cmd
  2370 ;; This function is called by:
  2371 ;;		_handleMenu
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375  05F2                     _Lcd_Clear:	
  2376                           ;psect for function _Lcd_Clear
  2377                           
  2378  05F2                     l1758:	
  2379                           ;incstack = 0
  2380                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2381                           
  2382                           
  2383                           ;./lcd.h: 37:  Lcd_Cmd(0);
  2384  05F2  3000               	movlw	0
  2385  05F3  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  2386                           
  2387                           ;./lcd.h: 38:  Lcd_Cmd(1);
  2388  05F8  3001               	movlw	1
  2389  05F9  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  2390  05FE                     l71:
  2391  05FE  0008               	return
  2392  05FF                     __end_of_Lcd_Clear:
  2393                           
  2394                           	psect	text12
  2395  061B                     __ptext12:	
  2396 ;; *************** function _setupWatchdogTimer *****************
  2397 ;; Defined at:
  2398 ;;		line 310 in file "main.c"
  2399 ;; Parameters:    Size  Location     Type
  2400 ;;		None
  2401 ;; Auto vars:     Size  Location     Type
  2402 ;;		None
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      void 
  2405 ;; Registers used:
  2406 ;;		None
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2412 ;;      Params:         0       0       0       0       0
  2413 ;;      Locals:         0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0
  2415 ;;      Totals:         0       0       0       0       0
  2416 ;;Total ram usage:        0 bytes
  2417 ;; Hardware stack levels used: 1
  2418 ;; Hardware stack levels required when called: 3
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_main
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426  061B                     _setupWatchdogTimer:	
  2427                           ;psect for function _setupWatchdogTimer
  2428                           
  2429  061B                     l1158:	
  2430                           ;incstack = 0
  2431                           ; Regs used in _setupWatchdogTimer: []
  2432                           
  2433                           
  2434                           ;main.c: 312:     OPTION_REGbits.PSA = 1;
  2435  061B  1683               	bsf	3,5	;RP0=1, select bank1
  2436  061C  1303               	bcf	3,6	;RP1=0, select bank1
  2437  061D  1581               	bsf	1,3	;volatile
  2438                           
  2439                           ;main.c: 313:     OPTION_REGbits.PS0 = 0;
  2440  061E  1001               	bcf	1,0	;volatile
  2441                           
  2442                           ;main.c: 314:     OPTION_REGbits.PS1 = 1;
  2443  061F  1481               	bsf	1,1	;volatile
  2444                           
  2445                           ;main.c: 315:     OPTION_REGbits.PS2 = 1;
  2446  0620  1501               	bsf	1,2	;volatile
  2447  0621  0064               	clrwdt	;# 
  2448  0622                     l181:	
  2449                           ;main.c: 317:     return;
  2450                           
  2451  0622  0008               	return
  2452  0623                     __end_of_setupWatchdogTimer:
  2453                           
  2454                           	psect	text13
  2455  05A8                     __ptext13:	
  2456 ;; *************** function _setupTimer *****************
  2457 ;; Defined at:
  2458 ;;		line 101 in file "main.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;		None
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;		None
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  1    wreg      void 
  2465 ;; Registers used:
  2466 ;;		wreg, status,2, status,0, pclath, cstack
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2472 ;;      Params:         0       0       0       0       0
  2473 ;;      Locals:         0       0       0       0       0
  2474 ;;      Temps:          0       0       0       0       0
  2475 ;;      Totals:         0       0       0       0       0
  2476 ;;Total ram usage:        0 bytes
  2477 ;; Hardware stack levels used: 1
  2478 ;; Hardware stack levels required when called: 6
  2479 ;; This function calls:
  2480 ;;		_setupNewVolumeFlow
  2481 ;; This function is called by:
  2482 ;;		_main
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486  05A8                     _setupTimer:	
  2487                           ;psect for function _setupTimer
  2488                           
  2489  05A8                     l1890:	
  2490                           ;incstack = 0
  2491                           ; Regs used in _setupTimer: [wreg+status,2+status,0+pclath+cstack]
  2492                           
  2493                           
  2494                           ;main.c: 104:     INTCONbits.GIE = 1;
  2495  05A8  178B               	bsf	11,7	;volatile
  2496                           
  2497                           ;main.c: 105:     INTCONbits.PEIE = 1;
  2498  05A9  170B               	bsf	11,6	;volatile
  2499                           
  2500                           ;main.c: 106:     PIE1bits.TMR1IE = 1;
  2501  05AA  1683               	bsf	3,5	;RP0=1, select bank1
  2502  05AB  1303               	bcf	3,6	;RP1=0, select bank1
  2503  05AC  140C               	bsf	12,0	;volatile
  2504                           
  2505                           ;main.c: 109:     T1CONbits.TMR1CS = 0;
  2506  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  2507  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  2508  05AF  1090               	bcf	16,1	;volatile
  2509                           
  2510                           ;main.c: 112:     T1CONbits.T1CKPS0 = 1;
  2511  05B0  1610               	bsf	16,4	;volatile
  2512                           
  2513                           ;main.c: 113:     T1CONbits.T1CKPS1 = 1;
  2514  05B1  1690               	bsf	16,5	;volatile
  2515  05B2                     l1892:
  2516                           
  2517                           ;main.c: 121:     TMR1H = 0x0B;
  2518  05B2  300B               	movlw	11
  2519  05B3  008F               	movwf	15	;volatile
  2520                           
  2521                           ;main.c: 122:     TMR1L = 0xDC;
  2522  05B4  30DC               	movlw	220
  2523  05B5  008E               	movwf	14	;volatile
  2524  05B6                     l1894:
  2525                           
  2526                           ;main.c: 124:     T1CONbits.TMR1ON = 0;
  2527  05B6  1010               	bcf	16,0	;volatile
  2528  05B7                     l1896:
  2529                           
  2530                           ;main.c: 128:     setupNewVolumeFlow();
  2531  05B7  120A  118A  2540  120A  118A  	fcall	_setupNewVolumeFlow
  2532  05BC                     l118:
  2533  05BC  0008               	return
  2534  05BD                     __end_of_setupTimer:
  2535                           
  2536                           	psect	text14
  2537  0540                     __ptext14:	
  2538 ;; *************** function _setupNewVolumeFlow *****************
  2539 ;; Defined at:
  2540 ;;		line 92 in file "main.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  new_ms          2   13[BANK0 ] int 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, status,2, status,0, pclath, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2554 ;;      Params:         0       0       0       0       0
  2555 ;;      Locals:         0       2       0       0       0
  2556 ;;      Temps:          0       0       0       0       0
  2557 ;;      Totals:         0       2       0       0       0
  2558 ;;Total ram usage:        2 bytes
  2559 ;; Hardware stack levels used: 1
  2560 ;; Hardware stack levels required when called: 5
  2561 ;; This function calls:
  2562 ;;		___wmul
  2563 ;;		_changeTimerMaxConter
  2564 ;; This function is called by:
  2565 ;;		_setupTimer
  2566 ;;		_handleMenu
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570  0540                     _setupNewVolumeFlow:	
  2571                           ;psect for function _setupNewVolumeFlow
  2572                           
  2573  0540                     l1768:	
  2574                           ;incstack = 0
  2575                           ; Regs used in _setupNewVolumeFlow: [wreg+status,2+status,0+pclath+cstack]
  2576                           
  2577                           
  2578                           ;main.c: 95:     int new_ms = water_volume*MLxMS;
  2579  0540  1283               	bcf	3,5	;RP0=0, select bank0
  2580  0541  1303               	bcf	3,6	;RP1=0, select bank0
  2581  0542  083E               	movf	_water_volume+1,w
  2582  0543  00F4               	movwf	___wmul@multiplier+1
  2583  0544  083D               	movf	_water_volume,w
  2584  0545  00F3               	movwf	___wmul@multiplier
  2585  0546  3019               	movlw	25
  2586  0547  00F5               	movwf	___wmul@multiplicand
  2587  0548  3000               	movlw	0
  2588  0549  00F6               	movwf	___wmul@multiplicand+1
  2589  054A  120A  118A  2483  120A  118A  	fcall	___wmul
  2590  054F  0874               	movf	?___wmul+1,w
  2591  0550  1283               	bcf	3,5	;RP0=0, select bank0
  2592  0551  1303               	bcf	3,6	;RP1=0, select bank0
  2593  0552  00AE               	movwf	setupNewVolumeFlow@new_ms+1
  2594  0553  0873               	movf	?___wmul,w
  2595  0554  00AD               	movwf	setupNewVolumeFlow@new_ms
  2596                           
  2597                           ;main.c: 97:     changeTimerMaxConter(new_ms);
  2598  0555  082E               	movf	setupNewVolumeFlow@new_ms+1,w
  2599  0556  00AC               	movwf	changeTimerMaxConter@mili_s+1
  2600  0557  082D               	movf	setupNewVolumeFlow@new_ms,w
  2601  0558  00AB               	movwf	changeTimerMaxConter@mili_s
  2602  0559  120A  118A  2579  120A  118A  	fcall	_changeTimerMaxConter
  2603  055E                     l115:
  2604  055E  0008               	return
  2605  055F                     __end_of_setupNewVolumeFlow:
  2606                           
  2607                           	psect	text15
  2608  0579                     __ptext15:	
  2609 ;; *************** function _changeTimerMaxConter *****************
  2610 ;; Defined at:
  2611 ;;		line 82 in file "main.c"
  2612 ;; Parameters:    Size  Location     Type
  2613 ;;  mili_s          2   11[BANK0 ] int 
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;		None
  2616 ;; Return value:  Size  Location     Type
  2617 ;;                  1    wreg      void 
  2618 ;; Registers used:
  2619 ;;		wreg, status,2, status,0, pclath, cstack
  2620 ;; Tracked objects:
  2621 ;;		On entry : 0/0
  2622 ;;		On exit  : 0/0
  2623 ;;		Unchanged: 0/0
  2624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2625 ;;      Params:         0       2       0       0       0
  2626 ;;      Locals:         0       0       0       0       0
  2627 ;;      Temps:          0       0       0       0       0
  2628 ;;      Totals:         0       2       0       0       0
  2629 ;;Total ram usage:        2 bytes
  2630 ;; Hardware stack levels used: 1
  2631 ;; Hardware stack levels required when called: 4
  2632 ;; This function calls:
  2633 ;;		___awdiv
  2634 ;; This function is called by:
  2635 ;;		_setupNewVolumeFlow
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639  0579                     _changeTimerMaxConter:	
  2640                           ;psect for function _changeTimerMaxConter
  2641                           
  2642  0579                     l1714:	
  2643                           ;incstack = 0
  2644                           ; Regs used in _changeTimerMaxConter: [wreg+status,2+status,0+pclath+cstack]
  2645                           
  2646                           
  2647                           ;main.c: 84:     timer_counter_max = (mili_s/500);
  2648  0579  30F4               	movlw	244
  2649  057A  1283               	bcf	3,5	;RP0=0, select bank0
  2650  057B  1303               	bcf	3,6	;RP1=0, select bank0
  2651  057C  00A2               	movwf	___awdiv@divisor
  2652  057D  3001               	movlw	1
  2653  057E  00A3               	movwf	___awdiv@divisor+1
  2654  057F  082C               	movf	changeTimerMaxConter@mili_s+1,w
  2655  0580  00A5               	movwf	___awdiv@dividend+1
  2656  0581  082B               	movf	changeTimerMaxConter@mili_s,w
  2657  0582  00A4               	movwf	___awdiv@dividend
  2658  0583  120A  118A  2206  120A  118A  	fcall	___awdiv
  2659  0588  1283               	bcf	3,5	;RP0=0, select bank0
  2660  0589  1303               	bcf	3,6	;RP1=0, select bank0
  2661  058A  0823               	movf	?___awdiv+1,w
  2662  058B  00C2               	movwf	_timer_counter_max+1
  2663  058C  0822               	movf	?___awdiv,w
  2664  058D  00C1               	movwf	_timer_counter_max
  2665  058E                     l1716:
  2666                           
  2667                           ;main.c: 85:     PORTC = timer_counter_max;
  2668  058E  0841               	movf	_timer_counter_max,w
  2669  058F  0087               	movwf	7	;volatile
  2670  0590                     l112:
  2671  0590  0008               	return
  2672  0591                     __end_of_changeTimerMaxConter:
  2673                           
  2674                           	psect	text16
  2675  0206                     __ptext16:	
  2676 ;; *************** function ___awdiv *****************
  2677 ;; Defined at:
  2678 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  2679 ;; Parameters:    Size  Location     Type
  2680 ;;  divisor         2    2[BANK0 ] int 
  2681 ;;  dividend        2    4[BANK0 ] int 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  quotient        2    9[BANK0 ] int 
  2684 ;;  sign            1    8[BANK0 ] unsigned char 
  2685 ;;  counter         1    7[BANK0 ] unsigned char 
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  2    2[BANK0 ] int 
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2695 ;;      Params:         0       4       0       0       0
  2696 ;;      Locals:         0       4       0       0       0
  2697 ;;      Temps:          0       1       0       0       0
  2698 ;;      Totals:         0       9       0       0       0
  2699 ;;Total ram usage:        9 bytes
  2700 ;; Hardware stack levels used: 1
  2701 ;; Hardware stack levels required when called: 3
  2702 ;; This function calls:
  2703 ;;		Nothing
  2704 ;; This function is called by:
  2705 ;;		_changeTimerMaxConter
  2706 ;;		_writeValor
  2707 ;;		_getADConverterValue
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711  0206                     ___awdiv:	
  2712                           ;psect for function ___awdiv
  2713                           
  2714  0206                     l1630:	
  2715                           ;incstack = 0
  2716                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2717                           
  2718  0206  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0207  1303               	bcf	3,6	;RP1=0, select bank0
  2720  0208  01A8               	clrf	___awdiv@sign
  2721  0209                     l1632:
  2722  0209  1FA3               	btfss	___awdiv@divisor+1,7
  2723  020A  2A0C               	goto	u1111
  2724  020B  2A0D               	goto	u1110
  2725  020C                     u1111:
  2726  020C  2A14               	goto	l1638
  2727  020D                     u1110:
  2728  020D                     l1634:
  2729  020D  09A2               	comf	___awdiv@divisor,f
  2730  020E  09A3               	comf	___awdiv@divisor+1,f
  2731  020F  0AA2               	incf	___awdiv@divisor,f
  2732  0210  1903               	skipnz
  2733  0211  0AA3               	incf	___awdiv@divisor+1,f
  2734  0212                     l1636:
  2735  0212  01A8               	clrf	___awdiv@sign
  2736  0213  0AA8               	incf	___awdiv@sign,f
  2737  0214                     l1638:
  2738  0214  1FA5               	btfss	___awdiv@dividend+1,7
  2739  0215  2A17               	goto	u1121
  2740  0216  2A18               	goto	u1120
  2741  0217                     u1121:
  2742  0217  2A21               	goto	l1644
  2743  0218                     u1120:
  2744  0218                     l1640:
  2745  0218  09A4               	comf	___awdiv@dividend,f
  2746  0219  09A5               	comf	___awdiv@dividend+1,f
  2747  021A  0AA4               	incf	___awdiv@dividend,f
  2748  021B  1903               	skipnz
  2749  021C  0AA5               	incf	___awdiv@dividend+1,f
  2750  021D                     l1642:
  2751  021D  3001               	movlw	1
  2752  021E  00A6               	movwf	??___awdiv
  2753  021F  0826               	movf	??___awdiv,w
  2754  0220  06A8               	xorwf	___awdiv@sign,f
  2755  0221                     l1644:
  2756  0221  01A9               	clrf	___awdiv@quotient
  2757  0222  01AA               	clrf	___awdiv@quotient+1
  2758  0223                     l1646:
  2759  0223  0822               	movf	___awdiv@divisor,w
  2760  0224  0423               	iorwf	___awdiv@divisor+1,w
  2761  0225  1903               	btfsc	3,2
  2762  0226  2A28               	goto	u1131
  2763  0227  2A29               	goto	u1130
  2764  0228                     u1131:
  2765  0228  2A60               	goto	l1666
  2766  0229                     u1130:
  2767  0229                     l1648:
  2768  0229  01A7               	clrf	___awdiv@counter
  2769  022A  0AA7               	incf	___awdiv@counter,f
  2770  022B  2A37               	goto	l1654
  2771  022C                     l1650:
  2772  022C  3001               	movlw	1
  2773  022D                     u1145:
  2774  022D  1003               	clrc
  2775  022E  0DA2               	rlf	___awdiv@divisor,f
  2776  022F  0DA3               	rlf	___awdiv@divisor+1,f
  2777  0230  3EFF               	addlw	-1
  2778  0231  1D03               	skipz
  2779  0232  2A2D               	goto	u1145
  2780  0233                     l1652:
  2781  0233  3001               	movlw	1
  2782  0234  00A6               	movwf	??___awdiv
  2783  0235  0826               	movf	??___awdiv,w
  2784  0236  07A7               	addwf	___awdiv@counter,f
  2785  0237                     l1654:
  2786  0237  1FA3               	btfss	___awdiv@divisor+1,7
  2787  0238  2A3A               	goto	u1151
  2788  0239  2A3B               	goto	u1150
  2789  023A                     u1151:
  2790  023A  2A2C               	goto	l1650
  2791  023B                     u1150:
  2792  023B                     l1656:
  2793  023B  3001               	movlw	1
  2794  023C                     u1165:
  2795  023C  1003               	clrc
  2796  023D  0DA9               	rlf	___awdiv@quotient,f
  2797  023E  0DAA               	rlf	___awdiv@quotient+1,f
  2798  023F  3EFF               	addlw	-1
  2799  0240  1D03               	skipz
  2800  0241  2A3C               	goto	u1165
  2801  0242  0823               	movf	___awdiv@divisor+1,w
  2802  0243  0225               	subwf	___awdiv@dividend+1,w
  2803  0244  1D03               	skipz
  2804  0245  2A48               	goto	u1175
  2805  0246  0822               	movf	___awdiv@divisor,w
  2806  0247  0224               	subwf	___awdiv@dividend,w
  2807  0248                     u1175:
  2808  0248  1C03               	skipc
  2809  0249  2A4B               	goto	u1171
  2810  024A  2A4C               	goto	u1170
  2811  024B                     u1171:
  2812  024B  2A53               	goto	l1662
  2813  024C                     u1170:
  2814  024C                     l1658:
  2815  024C  0822               	movf	___awdiv@divisor,w
  2816  024D  02A4               	subwf	___awdiv@dividend,f
  2817  024E  0823               	movf	___awdiv@divisor+1,w
  2818  024F  1C03               	skipc
  2819  0250  03A5               	decf	___awdiv@dividend+1,f
  2820  0251  02A5               	subwf	___awdiv@dividend+1,f
  2821  0252                     l1660:
  2822  0252  1429               	bsf	___awdiv@quotient,0
  2823  0253                     l1662:
  2824  0253  3001               	movlw	1
  2825  0254                     u1185:
  2826  0254  1003               	clrc
  2827  0255  0CA3               	rrf	___awdiv@divisor+1,f
  2828  0256  0CA2               	rrf	___awdiv@divisor,f
  2829  0257  3EFF               	addlw	-1
  2830  0258  1D03               	skipz
  2831  0259  2A54               	goto	u1185
  2832  025A                     l1664:
  2833  025A  3001               	movlw	1
  2834  025B  02A7               	subwf	___awdiv@counter,f
  2835  025C  1D03               	btfss	3,2
  2836  025D  2A5F               	goto	u1191
  2837  025E  2A60               	goto	u1190
  2838  025F                     u1191:
  2839  025F  2A3B               	goto	l1656
  2840  0260                     u1190:
  2841  0260                     l1666:
  2842  0260  0828               	movf	___awdiv@sign,w
  2843  0261  1903               	btfsc	3,2
  2844  0262  2A64               	goto	u1201
  2845  0263  2A65               	goto	u1200
  2846  0264                     u1201:
  2847  0264  2A6A               	goto	l1670
  2848  0265                     u1200:
  2849  0265                     l1668:
  2850  0265  09A9               	comf	___awdiv@quotient,f
  2851  0266  09AA               	comf	___awdiv@quotient+1,f
  2852  0267  0AA9               	incf	___awdiv@quotient,f
  2853  0268  1903               	skipnz
  2854  0269  0AAA               	incf	___awdiv@quotient+1,f
  2855  026A                     l1670:
  2856  026A  082A               	movf	___awdiv@quotient+1,w
  2857  026B  00A3               	movwf	?___awdiv+1
  2858  026C  0829               	movf	___awdiv@quotient,w
  2859  026D  00A2               	movwf	?___awdiv
  2860  026E                     l431:
  2861  026E  0008               	return
  2862  026F                     __end_of___awdiv:
  2863                           
  2864                           	psect	text17
  2865  0483                     __ptext17:	
  2866 ;; *************** function ___wmul *****************
  2867 ;; Defined at:
  2868 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;  multiplier      2    3[COMMON] unsigned int 
  2871 ;;  multiplicand    2    5[COMMON] unsigned int 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  product         2    7[COMMON] unsigned int 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  2    3[COMMON] unsigned int 
  2876 ;; Registers used:
  2877 ;;		wreg, status,2, status,0
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2883 ;;      Params:         4       0       0       0       0
  2884 ;;      Locals:         2       0       0       0       0
  2885 ;;      Temps:          0       0       0       0       0
  2886 ;;      Totals:         6       0       0       0       0
  2887 ;;Total ram usage:        6 bytes
  2888 ;; Hardware stack levels used: 1
  2889 ;; Hardware stack levels required when called: 3
  2890 ;; This function calls:
  2891 ;;		Nothing
  2892 ;; This function is called by:
  2893 ;;		_setupNewVolumeFlow
  2894 ;;		_getADConverterValue
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898  0483                     ___wmul:	
  2899                           ;psect for function ___wmul
  2900                           
  2901  0483                     l1316:	
  2902                           ;incstack = 0
  2903                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2904                           
  2905  0483  01F7               	clrf	___wmul@product
  2906  0484  01F8               	clrf	___wmul@product+1
  2907  0485                     l1318:
  2908  0485  1C73               	btfss	___wmul@multiplier,0
  2909  0486  2C88               	goto	u731
  2910  0487  2C89               	goto	u730
  2911  0488                     u731:
  2912  0488  2C8F               	goto	l278
  2913  0489                     u730:
  2914  0489                     l1320:
  2915  0489  0875               	movf	___wmul@multiplicand,w
  2916  048A  07F7               	addwf	___wmul@product,f
  2917  048B  1803               	skipnc
  2918  048C  0AF8               	incf	___wmul@product+1,f
  2919  048D  0876               	movf	___wmul@multiplicand+1,w
  2920  048E  07F8               	addwf	___wmul@product+1,f
  2921  048F                     l278:
  2922  048F  3001               	movlw	1
  2923  0490                     u745:
  2924  0490  1003               	clrc
  2925  0491  0DF5               	rlf	___wmul@multiplicand,f
  2926  0492  0DF6               	rlf	___wmul@multiplicand+1,f
  2927  0493  3EFF               	addlw	-1
  2928  0494  1D03               	skipz
  2929  0495  2C90               	goto	u745
  2930  0496                     l1322:
  2931  0496  3001               	movlw	1
  2932  0497                     u755:
  2933  0497  1003               	clrc
  2934  0498  0CF4               	rrf	___wmul@multiplier+1,f
  2935  0499  0CF3               	rrf	___wmul@multiplier,f
  2936  049A  3EFF               	addlw	-1
  2937  049B  1D03               	skipz
  2938  049C  2C97               	goto	u755
  2939  049D                     l1324:
  2940  049D  0873               	movf	___wmul@multiplier,w
  2941  049E  0474               	iorwf	___wmul@multiplier+1,w
  2942  049F  1D03               	btfss	3,2
  2943  04A0  2CA2               	goto	u761
  2944  04A1  2CA3               	goto	u760
  2945  04A2                     u761:
  2946  04A2  2C85               	goto	l1318
  2947  04A3                     u760:
  2948  04A3                     l1326:
  2949  04A3  0878               	movf	___wmul@product+1,w
  2950  04A4  00F4               	movwf	?___wmul+1
  2951  04A5  0877               	movf	___wmul@product,w
  2952  04A6  00F3               	movwf	?___wmul
  2953  04A7                     l280:
  2954  04A7  0008               	return
  2955  04A8                     __end_of___wmul:
  2956                           
  2957                           	psect	text18
  2958  0623                     __ptext18:	
  2959 ;; *************** function _setupExternalInterruption *****************
  2960 ;; Defined at:
  2961 ;;		line 195 in file "main.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;		None
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;		None
  2966 ;; Return value:  Size  Location     Type
  2967 ;;                  1    wreg      void 
  2968 ;; Registers used:
  2969 ;;		None
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2975 ;;      Params:         0       0       0       0       0
  2976 ;;      Locals:         0       0       0       0       0
  2977 ;;      Temps:          0       0       0       0       0
  2978 ;;      Totals:         0       0       0       0       0
  2979 ;;Total ram usage:        0 bytes
  2980 ;; Hardware stack levels used: 1
  2981 ;; Hardware stack levels required when called: 3
  2982 ;; This function calls:
  2983 ;;		Nothing
  2984 ;; This function is called by:
  2985 ;;		_main
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989  0623                     _setupExternalInterruption:	
  2990                           ;psect for function _setupExternalInterruption
  2991                           
  2992  0623                     l1140:	
  2993                           ;incstack = 0
  2994                           ; Regs used in _setupExternalInterruption: []
  2995                           
  2996                           
  2997                           ;main.c: 197:     OPTION_REGbits.INTEDG = 0;
  2998  0623  1683               	bsf	3,5	;RP0=1, select bank1
  2999  0624  1303               	bcf	3,6	;RP1=0, select bank1
  3000  0625  1301               	bcf	1,6	;volatile
  3001                           
  3002                           ;main.c: 198:  INTCONbits.GIE = 1;
  3003  0626  178B               	bsf	11,7	;volatile
  3004                           
  3005                           ;main.c: 199:  INTCONbits.INTE = 1;
  3006  0627  160B               	bsf	11,4	;volatile
  3007                           
  3008                           ;main.c: 200:     INTCONbits.INTF = 0;
  3009  0628  108B               	bcf	11,1	;volatile
  3010  0629                     l141:	
  3011                           ;main.c: 201:     return;
  3012                           
  3013  0629  0008               	return
  3014  062A                     __end_of_setupExternalInterruption:
  3015                           
  3016                           	psect	text19
  3017  0591                     __ptext19:	
  3018 ;; *************** function _setupADC *****************
  3019 ;; Defined at:
  3020 ;;		line 321 in file "main.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		status,2
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3034 ;;      Params:         0       0       0       0       0
  3035 ;;      Locals:         0       0       0       0       0
  3036 ;;      Temps:          0       0       0       0       0
  3037 ;;      Totals:         0       0       0       0       0
  3038 ;;Total ram usage:        0 bytes
  3039 ;; Hardware stack levels used: 1
  3040 ;; Hardware stack levels required when called: 3
  3041 ;; This function calls:
  3042 ;;		Nothing
  3043 ;; This function is called by:
  3044 ;;		_main
  3045 ;; This function uses a non-reentrant model
  3046 ;;
  3047                           
  3048  0591                     _setupADC:	
  3049                           ;psect for function _setupADC
  3050                           
  3051  0591                     l1160:	
  3052                           ;incstack = 0
  3053                           ; Regs used in _setupADC: [status,2]
  3054                           
  3055                           
  3056                           ;main.c: 326:     ADCON1bits.PCFG0 = 1;
  3057  0591  1683               	bsf	3,5	;RP0=1, select bank1
  3058  0592  1303               	bcf	3,6	;RP1=0, select bank1
  3059  0593  141F               	bsf	31,0	;volatile
  3060                           
  3061                           ;main.c: 327:     ADCON1bits.PCFG1 = 1;
  3062  0594  149F               	bsf	31,1	;volatile
  3063                           
  3064                           ;main.c: 328:     ADCON1bits.PCFG2 = 1;
  3065  0595  151F               	bsf	31,2	;volatile
  3066                           
  3067                           ;main.c: 329:     ADCON1bits.PCFG3 = 1;
  3068  0596  159F               	bsf	31,3	;volatile
  3069                           
  3070                           ;main.c: 332:     ADCON1bits.ADCS2 = 1;
  3071  0597  171F               	bsf	31,6	;volatile
  3072                           
  3073                           ;main.c: 333:     ADCON0bits.ADCS1 = 1;
  3074  0598  1283               	bcf	3,5	;RP0=0, select bank0
  3075  0599  1303               	bcf	3,6	;RP1=0, select bank0
  3076  059A  179F               	bsf	31,7	;volatile
  3077                           
  3078                           ;main.c: 334:     ADCON0bits.ADCS0 = 0;
  3079  059B  131F               	bcf	31,6	;volatile
  3080                           
  3081                           ;main.c: 337:     ADCON1bits.ADFM = 0;
  3082  059C  1683               	bsf	3,5	;RP0=1, select bank1
  3083  059D  1303               	bcf	3,6	;RP1=0, select bank1
  3084  059E  139F               	bcf	31,7	;volatile
  3085  059F                     l1162:
  3086                           
  3087                           ;main.c: 340:     ADRESL = 0;
  3088  059F  019E               	clrf	30	;volatile
  3089                           
  3090                           ;main.c: 341:     ADRESH = 0;
  3091  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  3092  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  3093  05A2  019E               	clrf	30	;volatile
  3094  05A3                     l1164:
  3095                           
  3096                           ;main.c: 345:     ADCON0bits.ADON = 1;
  3097  05A3  141F               	bsf	31,0	;volatile
  3098  05A4                     l1166:
  3099                           
  3100                           ;main.c: 348:     ADCON0bits.CHS0 = 0;
  3101  05A4  119F               	bcf	31,3	;volatile
  3102  05A5                     l1168:
  3103                           
  3104                           ;main.c: 349:     ADCON0bits.CHS1 = 0;
  3105  05A5  121F               	bcf	31,4	;volatile
  3106  05A6                     l1170:
  3107                           
  3108                           ;main.c: 350:     ADCON0bits.CHS2 = 0;
  3109  05A6  129F               	bcf	31,5	;volatile
  3110  05A7                     l184:
  3111  05A7  0008               	return
  3112  05A8                     __end_of_setupADC:
  3113                           
  3114                           	psect	text20
  3115  026F                     __ptext20:	
  3116 ;; *************** function _Lcd_Init *****************
  3117 ;; Defined at:
  3118 ;;		line 62 in file "./lcd.h"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, status,0, pclath, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3132 ;;      Params:         0       0       0       0       0
  3133 ;;      Locals:         0       0       0       0       0
  3134 ;;      Temps:          2       0       0       0       0
  3135 ;;      Totals:         2       0       0       0       0
  3136 ;;Total ram usage:        2 bytes
  3137 ;; Hardware stack levels used: 1
  3138 ;; Hardware stack levels required when called: 5
  3139 ;; This function calls:
  3140 ;;		_Lcd_Cmd
  3141 ;;		_Lcd_Port
  3142 ;; This function is called by:
  3143 ;;		_main
  3144 ;; This function uses a non-reentrant model
  3145 ;;
  3146                           
  3147  026F                     _Lcd_Init:	
  3148                           ;psect for function _Lcd_Init
  3149                           
  3150  026F                     l1880:	
  3151                           ;incstack = 0
  3152                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3153                           
  3154                           
  3155                           ;./lcd.h: 64:   Lcd_Port(0x00);
  3156  026F  3000               	movlw	0
  3157  0270  120A  118A  24CA  120A  118A  	fcall	_Lcd_Port
  3158  0275                     l1882:
  3159                           
  3160                           ;./lcd.h: 65:    _delay((unsigned long)((20)*(4000000/4000.0)));
  3161  0275  301A               	movlw	26
  3162  0276  00F8               	movwf	??_Lcd_Init+1
  3163  0277  30F8               	movlw	248
  3164  0278  00F7               	movwf	??_Lcd_Init
  3165  0279                     u1637:
  3166  0279  0BF7               	decfsz	??_Lcd_Init,f
  3167  027A  2A79               	goto	u1637
  3168  027B  0BF8               	decfsz	??_Lcd_Init+1,f
  3169  027C  2A79               	goto	u1637
  3170  027D  0000               	nop
  3171  027E                     l1884:
  3172                           
  3173                           ;./lcd.h: 66:   Lcd_Cmd(0x03);
  3174  027E  3003               	movlw	3
  3175  027F  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  3176                           
  3177                           ;./lcd.h: 67:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3178  0284  3007               	movlw	7
  3179  0285  00F8               	movwf	??_Lcd_Init+1
  3180  0286  307D               	movlw	125
  3181  0287  00F7               	movwf	??_Lcd_Init
  3182  0288                     u1647:
  3183  0288  0BF7               	decfsz	??_Lcd_Init,f
  3184  0289  2A88               	goto	u1647
  3185  028A  0BF8               	decfsz	??_Lcd_Init+1,f
  3186  028B  2A88               	goto	u1647
  3187  028C                     l1886:
  3188                           
  3189                           ;./lcd.h: 68:   Lcd_Cmd(0x03);
  3190  028C  3003               	movlw	3
  3191  028D  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  3192  0292                     l1888:
  3193                           
  3194                           ;./lcd.h: 69:  _delay((unsigned long)((11)*(4000000/4000.0)));
  3195  0292  300F               	movlw	15
  3196  0293  00F8               	movwf	??_Lcd_Init+1
  3197  0294  3047               	movlw	71
  3198  0295  00F7               	movwf	??_Lcd_Init
  3199  0296                     u1657:
  3200  0296  0BF7               	decfsz	??_Lcd_Init,f
  3201  0297  2A96               	goto	u1657
  3202  0298  0BF8               	decfsz	??_Lcd_Init+1,f
  3203  0299  2A96               	goto	u1657
  3204  029A  2A9B               	nop2
  3205                           
  3206                           ;./lcd.h: 70:   Lcd_Cmd(0x03);
  3207  029B  3003               	movlw	3
  3208  029C  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  3209                           
  3210                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  3211  02A1  3002               	movlw	2
  3212  02A2  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  3213                           
  3214                           ;./lcd.h: 73:   Lcd_Cmd(0x02);
  3215  02A7  3002               	movlw	2
  3216  02A8  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  3217                           
  3218                           ;./lcd.h: 74:   Lcd_Cmd(0x08);
  3219  02AD  3008               	movlw	8
  3220  02AE  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  3221                           
  3222                           ;./lcd.h: 75:   Lcd_Cmd(0x00);
  3223  02B3  3000               	movlw	0
  3224  02B4  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  3225                           
  3226                           ;./lcd.h: 76:   Lcd_Cmd(0x0C);
  3227  02B9  300C               	movlw	12
  3228  02BA  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  3229                           
  3230                           ;./lcd.h: 77:   Lcd_Cmd(0x00);
  3231  02BF  3000               	movlw	0
  3232  02C0  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  3233                           
  3234                           ;./lcd.h: 78:   Lcd_Cmd(0x06);
  3235  02C5  3006               	movlw	6
  3236  02C6  120A  118A  255F  120A  118A  	fcall	_Lcd_Cmd
  3237  02CB                     l80:
  3238  02CB  0008               	return
  3239  02CC                     __end_of_Lcd_Init:
  3240                           
  3241                           	psect	text21
  3242  055F                     __ptext21:	
  3243 ;; *************** function _Lcd_Cmd *****************
  3244 ;; Defined at:
  3245 ;;		line 26 in file "./lcd.h"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  a               1    wreg     unsigned char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  a               1    6[COMMON] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      void 
  3252 ;; Registers used:
  3253 ;;		wreg, status,2, status,0, pclath, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3259 ;;      Params:         0       0       0       0       0
  3260 ;;      Locals:         1       0       0       0       0
  3261 ;;      Temps:          2       0       0       0       0
  3262 ;;      Totals:         3       0       0       0       0
  3263 ;;Total ram usage:        3 bytes
  3264 ;; Hardware stack levels used: 1
  3265 ;; Hardware stack levels required when called: 4
  3266 ;; This function calls:
  3267 ;;		_Lcd_Port
  3268 ;; This function is called by:
  3269 ;;		_Lcd_Clear
  3270 ;;		_Lcd_Set_Cursor
  3271 ;;		_Lcd_Init
  3272 ;;		_Lcd_Shift_Right
  3273 ;;		_Lcd_Shift_Left
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277  055F                     _Lcd_Cmd:	
  3278                           ;psect for function _Lcd_Cmd
  3279                           
  3280                           
  3281                           ;incstack = 0
  3282 ;; hardware stack exceeded
  3283                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3284                           ;Lcd_Cmd@a stored from wreg
  3285  055F  00F6               	movwf	Lcd_Cmd@a
  3286  0560                     l1620:
  3287                           
  3288                           ;./lcd.h: 26: void Lcd_Cmd(char a);./lcd.h: 27: {;./lcd.h: 28:  RD2 = 0;
  3289  0560  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0561  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0562  1108               	bcf	8,2	;volatile
  3292  0563                     l1622:
  3293                           
  3294                           ;./lcd.h: 29:  Lcd_Port(a);
  3295  0563  0876               	movf	Lcd_Cmd@a,w
  3296  0564  120A  118A  24CA  120A  118A  	fcall	_Lcd_Port
  3297  0569                     l1624:
  3298                           
  3299                           ;./lcd.h: 30:  RD3 = 1;
  3300  0569  1283               	bcf	3,5	;RP0=0, select bank0
  3301  056A  1303               	bcf	3,6	;RP1=0, select bank0
  3302  056B  1588               	bsf	8,3	;volatile
  3303  056C                     l1626:
  3304                           
  3305                           ;./lcd.h: 31:         _delay((unsigned long)((4)*(4000000/4000.0)));
  3306  056C  3006               	movlw	6
  3307  056D  00F5               	movwf	??_Lcd_Cmd+1
  3308  056E  3030               	movlw	48
  3309  056F  00F4               	movwf	??_Lcd_Cmd
  3310  0570                     u1667:
  3311  0570  0BF4               	decfsz	??_Lcd_Cmd,f
  3312  0571  2D70               	goto	u1667
  3313  0572  0BF5               	decfsz	??_Lcd_Cmd+1,f
  3314  0573  2D70               	goto	u1667
  3315  0574  0000               	nop
  3316  0575                     l1628:
  3317                           
  3318                           ;./lcd.h: 32:         RD3 = 0;
  3319  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3320  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3321  0577  1188               	bcf	8,3	;volatile
  3322  0578                     l68:
  3323  0578  0008               	return
  3324  0579                     __end_of_Lcd_Cmd:
  3325                           
  3326                           	psect	text22
  3327  04CA                     __ptext22:	
  3328 ;; *************** function _Lcd_Port *****************
  3329 ;; Defined at:
  3330 ;;		line 4 in file "./lcd.h"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  a               1    wreg     unsigned char 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  a               1    3[COMMON] unsigned char 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		wreg
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3344 ;;      Params:         0       0       0       0       0
  3345 ;;      Locals:         1       0       0       0       0
  3346 ;;      Temps:          0       0       0       0       0
  3347 ;;      Totals:         1       0       0       0       0
  3348 ;;Total ram usage:        1 bytes
  3349 ;; Hardware stack levels used: 1
  3350 ;; Hardware stack levels required when called: 3
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_Lcd_Cmd
  3355 ;;		_Lcd_Init
  3356 ;;		_Lcd_Write_Char
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360  04CA                     _Lcd_Port:	
  3361                           ;psect for function _Lcd_Port
  3362                           
  3363                           
  3364                           ;incstack = 0
  3365                           ; Regs used in _Lcd_Port: [wreg]
  3366                           ;Lcd_Port@a stored from wreg
  3367  04CA  00F3               	movwf	Lcd_Port@a
  3368  04CB                     l1610:
  3369                           
  3370                           ;./lcd.h: 4: void Lcd_Port(char a);./lcd.h: 5: {;./lcd.h: 6:  if(a & 1)
  3371  04CB  1C73               	btfss	Lcd_Port@a,0
  3372  04CC  2CCE               	goto	u1071
  3373  04CD  2CCF               	goto	u1070
  3374  04CE                     u1071:
  3375  04CE  2CD3               	goto	l57
  3376  04CF                     u1070:
  3377  04CF                     l1612:
  3378                           
  3379                           ;./lcd.h: 7:   RD4 = 1;
  3380  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  3381  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  3382  04D1  1608               	bsf	8,4	;volatile
  3383  04D2  2CD6               	goto	l58
  3384  04D3                     l57:	
  3385                           ;./lcd.h: 8:  else
  3386                           
  3387                           
  3388                           ;./lcd.h: 9:   RD4 = 0;
  3389  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3390  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  3391  04D5  1208               	bcf	8,4	;volatile
  3392  04D6                     l58:
  3393                           
  3394                           ;./lcd.h: 11:  if(a & 2)
  3395  04D6  1CF3               	btfss	Lcd_Port@a,1
  3396  04D7  2CD9               	goto	u1081
  3397  04D8  2CDA               	goto	u1080
  3398  04D9                     u1081:
  3399  04D9  2CDC               	goto	l59
  3400  04DA                     u1080:
  3401  04DA                     l1614:
  3402                           
  3403                           ;./lcd.h: 12:   RD5 = 1;
  3404  04DA  1688               	bsf	8,5	;volatile
  3405  04DB  2CDD               	goto	l60
  3406  04DC                     l59:	
  3407                           ;./lcd.h: 13:  else
  3408                           
  3409                           
  3410                           ;./lcd.h: 14:   RD5 = 0;
  3411  04DC  1288               	bcf	8,5	;volatile
  3412  04DD                     l60:
  3413                           
  3414                           ;./lcd.h: 16:  if(a & 4)
  3415  04DD  1D73               	btfss	Lcd_Port@a,2
  3416  04DE  2CE0               	goto	u1091
  3417  04DF  2CE1               	goto	u1090
  3418  04E0                     u1091:
  3419  04E0  2CE3               	goto	l61
  3420  04E1                     u1090:
  3421  04E1                     l1616:
  3422                           
  3423                           ;./lcd.h: 17:   RD6 = 1;
  3424  04E1  1708               	bsf	8,6	;volatile
  3425  04E2  2CE4               	goto	l62
  3426  04E3                     l61:	
  3427                           ;./lcd.h: 18:  else
  3428                           
  3429                           
  3430                           ;./lcd.h: 19:   RD6 = 0;
  3431  04E3  1308               	bcf	8,6	;volatile
  3432  04E4                     l62:
  3433                           
  3434                           ;./lcd.h: 21:  if(a & 8)
  3435  04E4  1DF3               	btfss	Lcd_Port@a,3
  3436  04E5  2CE7               	goto	u1101
  3437  04E6  2CE8               	goto	u1100
  3438  04E7                     u1101:
  3439  04E7  2CEA               	goto	l63
  3440  04E8                     u1100:
  3441  04E8                     l1618:
  3442                           
  3443                           ;./lcd.h: 22:   RD7 = 1;
  3444  04E8  1788               	bsf	8,7	;volatile
  3445  04E9  2CEB               	goto	l65
  3446  04EA                     l63:	
  3447                           ;./lcd.h: 23:  else
  3448                           
  3449                           
  3450                           ;./lcd.h: 24:   RD7 = 0;
  3451  04EA  1388               	bcf	8,7	;volatile
  3452  04EB                     l65:
  3453  04EB  0008               	return
  3454  04EC                     __end_of_Lcd_Port:
  3455                           
  3456                           	psect	text23
  3457  05D0                     __ptext23:	
  3458 ;; *************** function _interrupcao *****************
  3459 ;; Defined at:
  3460 ;;		line 188 in file "main.c"
  3461 ;; Parameters:    Size  Location     Type
  3462 ;;		None
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;		None
  3465 ;; Return value:  Size  Location     Type
  3466 ;;                  1    wreg      void 
  3467 ;; Registers used:
  3468 ;;		wreg, status,2, status,0, pclath, cstack
  3469 ;; Tracked objects:
  3470 ;;		On entry : 0/0
  3471 ;;		On exit  : 0/0
  3472 ;;		Unchanged: 0/0
  3473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3474 ;;      Params:         0       0       0       0       0
  3475 ;;      Locals:         0       0       0       0       0
  3476 ;;      Temps:          2       0       0       0       0
  3477 ;;      Totals:         2       0       0       0       0
  3478 ;;Total ram usage:        2 bytes
  3479 ;; Hardware stack levels used: 1
  3480 ;; Hardware stack levels required when called: 2
  3481 ;; This function calls:
  3482 ;;		_handleExternalInterruption
  3483 ;;		_handleTimerInterruption
  3484 ;; This function is called by:
  3485 ;;		Interrupt level 1
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489  05D0                     _interrupcao:	
  3490                           ;psect for function _interrupcao
  3491                           
  3492  05D0                     i1l1582:
  3493                           
  3494                           ;main.c: 190:     handleTimerInterruption();
  3495  05D0  120A  118A  2425  120A  118A  	fcall	_handleTimerInterruption
  3496                           
  3497                           ;main.c: 191:     handleExternalInterruption();
  3498  05D5  120A  118A  25E1  120A  118A  	fcall	_handleExternalInterruption
  3499  05DA                     i1l138:
  3500  05DA  0872               	movf	??_interrupcao+1,w
  3501  05DB  008A               	movwf	10
  3502  05DC  0E71               	swapf	??_interrupcao,w
  3503  05DD  0083               	movwf	3
  3504  05DE  0EFE               	swapf	btemp,f
  3505  05DF  0E7E               	swapf	btemp,w
  3506  05E0  0009               	retfie
  3507  05E1                     __end_of_interrupcao:
  3508                           
  3509                           	psect	intentry
  3510  0004                     __pintentry:	
  3511                           ;incstack = 0
  3512 ;; hardware stack exceeded
  3513                           ; Regs used in _interrupcao: [wreg+status,2+status,0+pclath+cstack]
  3514                           
  3515  0004                     interrupt_function:
  3516  007E                     saved_w	set	btemp
  3517  0004  00FE               	movwf	btemp
  3518  0005  0E03               	swapf	3,w
  3519  0006  00F1               	movwf	??_interrupcao
  3520  0007  080A               	movf	10,w
  3521  0008  00F2               	movwf	??_interrupcao+1
  3522  0009  120A  118A  2DD0   	ljmp	_interrupcao
  3523                           
  3524                           	psect	text24
  3525  0425                     __ptext24:	
  3526 ;; *************** function _handleTimerInterruption *****************
  3527 ;; Defined at:
  3528 ;;		line 135 in file "main.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;		None
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;		None
  3533 ;; Return value:  Size  Location     Type
  3534 ;;                  1    wreg      void 
  3535 ;; Registers used:
  3536 ;;		wreg, status,2, status,0
  3537 ;; Tracked objects:
  3538 ;;		On entry : 0/0
  3539 ;;		On exit  : 0/0
  3540 ;;		Unchanged: 0/0
  3541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3542 ;;      Params:         0       0       0       0       0
  3543 ;;      Locals:         0       0       0       0       0
  3544 ;;      Temps:          1       0       0       0       0
  3545 ;;      Totals:         1       0       0       0       0
  3546 ;;Total ram usage:        1 bytes
  3547 ;; Hardware stack levels used: 1
  3548 ;; This function calls:
  3549 ;;		Nothing
  3550 ;; This function is called by:
  3551 ;;		_interrupcao
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555  0425                     _handleTimerInterruption:	
  3556                           ;psect for function _handleTimerInterruption
  3557                           
  3558  0425                     i1l1522:	
  3559                           ;incstack = 0
  3560                           ; Regs used in _handleTimerInterruption: [wreg+status,2+status,0]
  3561                           
  3562                           
  3563                           ;main.c: 137:     if(TMR1IF){
  3564  0425  1283               	bcf	3,5	;RP0=0, select bank0
  3565  0426  1303               	bcf	3,6	;RP1=0, select bank0
  3566  0427  1C0C               	btfss	12,0	;volatile
  3567  0428  2C2A               	goto	u100_21
  3568  0429  2C2B               	goto	u100_20
  3569  042A                     u100_21:
  3570  042A  2C59               	goto	i1l125
  3571  042B                     u100_20:
  3572  042B                     i1l1524:
  3573                           
  3574                           ;main.c: 138:         if(irrigacao_ativa){
  3575  042B  0879               	movf	_irrigacao_ativa,w
  3576  042C  047A               	iorwf	_irrigacao_ativa+1,w
  3577  042D  1903               	btfsc	3,2
  3578  042E  2C30               	goto	u101_21
  3579  042F  2C31               	goto	u101_20
  3580  0430                     u101_21:
  3581  0430  2C4F               	goto	i1l1540
  3582  0431                     u101_20:
  3583  0431                     i1l1526:
  3584                           
  3585                           ;main.c: 139:             timer_counter++;
  3586  0431  3001               	movlw	1
  3587  0432  07C5               	addwf	_timer_counter,f
  3588  0433  1803               	skipnc
  3589  0434  0AC6               	incf	_timer_counter+1,f
  3590  0435  3000               	movlw	0
  3591  0436  07C6               	addwf	_timer_counter+1,f
  3592  0437                     i1l1528:
  3593                           
  3594                           ;main.c: 140:             PORTBbits.RB1 = 1;
  3595  0437  1486               	bsf	6,1	;volatile
  3596  0438                     i1l1530:
  3597                           
  3598                           ;main.c: 141:             PORTBbits.RB6 = 1;
  3599  0438  1706               	bsf	6,6	;volatile
  3600                           
  3601                           ;main.c: 142:             if(timer_counter_max <= timer_counter){
  3602  0439  0846               	movf	_timer_counter+1,w
  3603  043A  3A80               	xorlw	128
  3604  043B  00F0               	movwf	??_handleTimerInterruption
  3605  043C  0842               	movf	_timer_counter_max+1,w
  3606  043D  3A80               	xorlw	128
  3607  043E  0270               	subwf	??_handleTimerInterruption,w
  3608  043F  1D03               	skipz
  3609  0440  2C43               	goto	u102_25
  3610  0441  0841               	movf	_timer_counter_max,w
  3611  0442  0245               	subwf	_timer_counter,w
  3612  0443                     u102_25:
  3613  0443  1C03               	skipc
  3614  0444  2C46               	goto	u102_21
  3615  0445  2C47               	goto	u102_20
  3616  0446                     u102_21:
  3617  0446  2C52               	goto	i1l1544
  3618  0447                     u102_20:
  3619  0447                     i1l1532:
  3620                           
  3621                           ;main.c: 143:                 PORTBbits.RB1 = 0;
  3622  0447  1283               	bcf	3,5	;RP0=0, select bank0
  3623  0448  1303               	bcf	3,6	;RP1=0, select bank0
  3624  0449  1086               	bcf	6,1	;volatile
  3625  044A                     i1l1534:
  3626                           
  3627                           ;main.c: 144:                 irrigacao_ativa = 0;
  3628  044A  01F9               	clrf	_irrigacao_ativa
  3629  044B  01FA               	clrf	_irrigacao_ativa+1
  3630  044C                     i1l1536:
  3631                           
  3632                           ;main.c: 145:                 PORTBbits.RB6 = 0;
  3633  044C  1306               	bcf	6,6	;volatile
  3634  044D                     i1l1538:
  3635                           
  3636                           ;main.c: 148:                 T1CONbits.TMR1ON = 0;
  3637  044D  1010               	bcf	16,0	;volatile
  3638  044E  2C52               	goto	i1l1544
  3639  044F                     i1l1540:
  3640                           
  3641                           ;main.c: 152:             timer_counter = 0;
  3642  044F  01C5               	clrf	_timer_counter
  3643  0450  01C6               	clrf	_timer_counter+1
  3644  0451                     i1l1542:
  3645                           
  3646                           ;main.c: 153:             PORTBbits.RB1 = 0;
  3647  0451  1086               	bcf	6,1	;volatile
  3648  0452                     i1l1544:
  3649                           
  3650                           ;main.c: 155:         PIR1bits.TMR1IF = 0;
  3651  0452  1283               	bcf	3,5	;RP0=0, select bank0
  3652  0453  1303               	bcf	3,6	;RP1=0, select bank0
  3653  0454  100C               	bcf	12,0	;volatile
  3654  0455                     i1l1546:
  3655                           
  3656                           ;main.c: 156:         TMR1H = 0x0B;
  3657  0455  300B               	movlw	11
  3658  0456  008F               	movwf	15	;volatile
  3659  0457                     i1l1548:
  3660                           
  3661                           ;main.c: 157:         TMR1L = 0xDC;
  3662  0457  30DC               	movlw	220
  3663  0458  008E               	movwf	14	;volatile
  3664  0459                     i1l125:
  3665  0459  0008               	return
  3666  045A                     __end_of_handleTimerInterruption:
  3667                           
  3668                           	psect	text25
  3669  05E1                     __ptext25:	
  3670 ;; *************** function _handleExternalInterruption *****************
  3671 ;; Defined at:
  3672 ;;		line 177 in file "main.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;		None
  3675 ;; Auto vars:     Size  Location     Type
  3676 ;;		None
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      void 
  3679 ;; Registers used:
  3680 ;;		wreg, status,2, status,0, pclath, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3686 ;;      Params:         0       0       0       0       0
  3687 ;;      Locals:         0       0       0       0       0
  3688 ;;      Temps:          0       0       0       0       0
  3689 ;;      Totals:         0       0       0       0       0
  3690 ;;Total ram usage:        0 bytes
  3691 ;; Hardware stack levels used: 1
  3692 ;; Hardware stack levels required when called: 1
  3693 ;; This function calls:
  3694 ;;		i1_irrigar
  3695 ;; This function is called by:
  3696 ;;		_interrupcao
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700  05E1                     _handleExternalInterruption:	
  3701                           ;psect for function _handleExternalInterruption
  3702                           
  3703  05E1                     i1l1552:	
  3704                           ;incstack = 0
  3705 ;; hardware stack exceeded
  3706                           ; Regs used in _handleExternalInterruption: [wreg+status,2+status,0+pclath+cstack]
  3707                           
  3708                           
  3709                           ;main.c: 179:     if(INTF){
  3710  05E1  1C8B               	btfss	11,1	;volatile
  3711  05E2  2DE4               	goto	u103_21
  3712  05E3  2DE5               	goto	u103_20
  3713  05E4                     u103_21:
  3714  05E4  2DF1               	goto	i1l133
  3715  05E5                     u103_20:
  3716  05E5                     i1l1554:
  3717                           
  3718                           ;main.c: 180:         if(!irrigacao_ativa){
  3719  05E5  0879               	movf	_irrigacao_ativa,w
  3720  05E6  047A               	iorwf	_irrigacao_ativa+1,w
  3721  05E7  1D03               	btfss	3,2
  3722  05E8  2DEA               	goto	u104_21
  3723  05E9  2DEB               	goto	u104_20
  3724  05EA                     u104_21:
  3725  05EA  2DF0               	goto	i1l1558
  3726  05EB                     u104_20:
  3727  05EB                     i1l1556:
  3728                           
  3729                           ;main.c: 181:             irrigar();
  3730  05EB  120A  118A  2609  120A  118A  	fcall	i1_irrigar
  3731  05F0                     i1l1558:
  3732                           
  3733                           ;main.c: 183:         INTCONbits.INTF = 0;
  3734  05F0  108B               	bcf	11,1	;volatile
  3735  05F1                     i1l133:
  3736  05F1  0008               	return
  3737  05F2                     __end_of_handleExternalInterruption:
  3738                           
  3739                           	psect	text26
  3740  0609                     __ptext26:	
  3741 ;; *************** function i1_irrigar *****************
  3742 ;; Defined at:
  3743 ;;		line 163 in file "main.c"
  3744 ;; Parameters:    Size  Location     Type
  3745 ;;		None
  3746 ;; Auto vars:     Size  Location     Type
  3747 ;;		None
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      void 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3757 ;;      Params:         0       0       0       0       0
  3758 ;;      Locals:         0       0       0       0       0
  3759 ;;      Temps:          0       0       0       0       0
  3760 ;;      Totals:         0       0       0       0       0
  3761 ;;Total ram usage:        0 bytes
  3762 ;; Hardware stack levels used: 1
  3763 ;; This function calls:
  3764 ;;		Nothing
  3765 ;; This function is called by:
  3766 ;;		_handleExternalInterruption
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770  0609                     i1_irrigar:	
  3771                           ;psect for function i1_irrigar
  3772                           
  3773  0609                     i1l1496:	
  3774                           ;incstack = 0
  3775 ;; hardware stack exceeded
  3776                           ; Regs used in i1_irrigar: [wreg+status,2]
  3777                           
  3778                           
  3779                           ;main.c: 165:     irrigacao_ativa = 1;
  3780  0609  3001               	movlw	1
  3781  060A  00F9               	movwf	_irrigacao_ativa
  3782  060B  3000               	movlw	0
  3783  060C  00FA               	movwf	_irrigacao_ativa+1
  3784  060D                     i1l1498:
  3785                           
  3786                           ;main.c: 166:     timer_counter = 0;
  3787  060D  1283               	bcf	3,5	;RP0=0, select bank0
  3788  060E  1303               	bcf	3,6	;RP1=0, select bank0
  3789  060F  01C5               	clrf	_timer_counter
  3790  0610  01C6               	clrf	_timer_counter+1
  3791  0611                     i1l1500:
  3792                           
  3793                           ;main.c: 168:     T1CONbits.TMR1ON = 1;
  3794  0611  1410               	bsf	16,0	;volatile
  3795  0612                     i1l128:
  3796  0612  0008               	return
  3797  0613                     __end_ofi1_irrigar:
  3798  007E                     btemp	set	126	;btemp
  3799  007E                     wtemp0	set	126

Data Sizes:
    Strings     27
    Constant    0
    Data        8
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      11
    BANK0            80     27      39
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[12]), STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Init
    _getADConverterValue->___wmul
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Clear->_Lcd_Cmd
    _setupNewVolumeFlow->___wmul
    ___awdiv->___wmul
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _interrupcao in COMMON

    _interrupcao->_handleTimerInterruption

Critical Paths under _main in BANK0

    _main->_verifyMenu
    _verifySensor->_getADConverterValue
    _getADConverterValue->___awdiv
    _verifyMenu->_handleMenu
    _handleMenu->_writeValor
    _writeValor->___awdiv
    _setupTimer->_setupNewVolumeFlow
    _setupNewVolumeFlow->_changeTimerMaxConter
    _changeTimerMaxConter->___awdiv
    ___awdiv->___awmod

Critical Paths under _interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupcao in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupcao in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcao in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10896
                           _Lcd_Init
                           _setupADC
          _setupExternalInterruption
                         _setupTimer
                 _setupWatchdogTimer
                         _verifyMenu
                       _verifySensor
 ---------------------------------------------------------------------------------
 (1) _verifySensor                                         1     1      0    1595
                                             17 BANK0      1     1      0
                _getADConverterValue
                            _irrigar
 ---------------------------------------------------------------------------------
 (2) _irrigar                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getADConverterValue                                  6     4      2    1595
                                             11 BANK0      6     4      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _verifyMenu                                           3     3      0    7306
                                             24 BANK0      3     3      0
                         _handleMenu
 ---------------------------------------------------------------------------------
 (2) _handleMenu                                           7     7      0    7306
                                             17 BANK0      7     7      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                 _setupNewVolumeFlow
                         _writeValor
 ---------------------------------------------------------------------------------
 (3) _writeValor                                           6     4      2    3762
                                             11 BANK0      6     4      2
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       7     6      1     815
                                              7 COMMON     1     0      1
                                              0 BANK0      6     6      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     3     3      0     456
                                              0 BANK0      3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       4     4      0     254
                                              4 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _setupWatchdogTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupTimer                                           0     0      0    1716
                 _setupNewVolumeFlow
 ---------------------------------------------------------------------------------
 (3) _setupNewVolumeFlow                                   2     2      0    1716
                                             13 BANK0      2     2      0
                             ___wmul
               _changeTimerMaxConter
 ---------------------------------------------------------------------------------
 (4) _changeTimerMaxConter                                 2     0      2    1286
                                             11 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1165
                                              2 BANK0      9     5      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     396
                                              3 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _setupExternalInterruption                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     279
                                              7 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              3     3      0     155
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     124
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _interrupcao                                          2     2      0       0
                                              1 COMMON     2     2      0
         _handleExternalInterruption
            _handleTimerInterruption
 ---------------------------------------------------------------------------------
 (8) _handleTimerInterruption                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _handleExternalInterruption                           0     0      0       0
                          i1_irrigar
 ---------------------------------------------------------------------------------
 (9) i1_irrigar                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _setupADC
   _setupExternalInterruption
   _setupTimer
     _setupNewVolumeFlow
       ___wmul
       _changeTimerMaxConter
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
   _setupWatchdogTimer
   _verifyMenu
     _handleMenu
       _Lcd_Clear
         _Lcd_Cmd
       _Lcd_Set_Cursor
         _Lcd_Cmd
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _setupNewVolumeFlow
       _writeValor
         _Lcd_Set_Cursor
         _Lcd_Write_Char
         ___awdiv
         ___awmod
   _verifySensor
     _getADConverterValue
       ___awdiv
       ___wmul
     _irrigar

 _interrupcao (ROOT)
   _handleExternalInterruption
     i1_irrigar
   _handleTimerInterruption

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1B      27       5       48.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      32      12        0.0%
ABS                  0      0      32       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Fri Mar 04 19:21:06 2022

                                 pc 0002                     writeValor@valor 002B  
                                l60 04DD                                  l61 04E3  
                                l62 04E4                                  l63 04EA  
                                l71 05FE                                  l80 02CB  
                                l65 04EB                                  l57 04D3  
                                l58 04D6                                  l59 04DC  
                                l83 03EE                                  l68 0578  
                                l77 037E                                  l89 0482  
                      ___awdiv@sign 0028                    writeValor@dezena 002F  
                                fsr 0004                 ___wmul@multiplicand 0075  
                   _irrigacao_ativa 0079                                 l112 0590  
                               l115 055E                                 l141 0629  
                               l118 05BC                                 l144 0205  
                               l128 0608                                 l170 053F  
                               l164 0184                                 l156 00D7  
                               l148 0032                                 l181 0622  
                               l173 0424                                 l166 0197  
                               l431 026E                                 l184 05A7  
                               l280 04A7                                 l176 04C6  
                               l178 04C9                                 l444 0326  
                               l278 048F                                 _RD2 0042  
                               _RD3 0043                                 _RD4 0044  
                               _RD5 0045                                 _RD6 0046  
                               _RD7 0047                                 u730 0489  
                               u731 0488                                 u760 04A3  
                               u761 04A2                                 u745 0490  
                               u755 0497                   writeValor@centena 002E  
                               fsr0 0004                                 indf 0000  
                      ___awmod@sign 0021        ??_handleExternalInterruption 0070  
                              l1140 0623                                l1160 0591  
                              l1320 0489                                l1170 05A6  
                              l1162 059F                                l1322 0496  
                              l1164 05A3                                l1324 049D  
                              l1316 0483                                l1166 05A4  
                              l1326 04A3                                l1318 0485  
                              l1158 061B                                l1168 05A5  
                              l1610 04CB                                l1612 04CF  
                              l1620 0560                                l1700 03D4  
                              l1614 04DA                                l1622 0563  
                              l1630 0206                                l1710 03E7  
                              l1702 03D7                                l1390 0607  
                              l1616 04E1                                l1624 0569  
                              l1640 0218                                l1632 0209  
                              l1712 03EB                                l1704 03DB  
                              l1720 02CC                                l1800 009A  
                              l1618 04E8                                l1626 056C  
                              l1650 022C                                l1642 021D  
                              l1634 020D                                l1714 0579  
                              l1706 03DE                                l1730 02DE  
                              l1722 02CF                                l1810 00B6  
                              l1802 00A4                                l1386 05FF  
                              l1628 0575                                l1660 0252  
                              l1652 0233                                l1644 0221  
                              l1636 0212                                l1716 058E  
                              l1708 03E4                                l1740 02F7  
                              l1732 02E3                                l1724 02D3  
                              l1820 00E2                                l1812 00BF  
                              l1804 00AA                                l1900 0521  
                              l1388 0603                                l1670 026A  
                              l1662 0253                                l1654 0237  
                              l1646 0223                                l1638 0214  
                              l1742 02FB                                l1734 02E9  
                              l1750 0318                                l1726 02D8  
                              l1830 0105                                l1822 00EA  
                              l1806 00B0                                l1814 00C9  
                              l1902 0527                                l1910 04A8  
                              l1664 025A                                l1656 023B  
                              l1648 0229                                l1760 045D  
                              l1680 0345                                l1752 031D  
                              l1744 0305                                l1736 02EC  
                              l1728 02DA                                l1840 012A  
                              l1832 010A                                l1824 00F0  
                              l1816 00D1                                l1808 00B4  
                              l1904 052B                                l1912 04BD  
                              l1920 037F                                l1658 024C  
                              l1666 0260                                l1762 0460  
                              l1690 0370                                l1682 034B  
                              l1674 032A                                l1754 0322  
                              l1746 030B                                l1738 02F3  
                              l1850 0156                                l1842 0137  
                              l1834 0110                                l1826 00FB  
                              l1818 00D8                                l1906 053A  
                              l1914 04C0                                l1930 038D  
                              l1922 0385                                l1668 0265  
                              l1764 046D                                l1692 0376  
                              l1676 032F                                l1684 0354  
                              l1748 0312                                l1772 0198  
                              l1852 015C                                l1844 013B  
                              l1828 0101                                l1836 011E  
                              l1860 0175                                l1780 003D  
                              l1940 03A9                                l1932 0390  
                              l1924 0386                                l1758 05F2  
                              l1694 03B9                                l1766 0475  
                              l1686 035A                                l1678 0340  
                              l1862 017E                                l1854 0160  
                              l1846 0146                                l1838 0124  
                              l1790 0072                                l1782 0045  
                              l1870 03EF                                l1942 03AE  
                              l1934 0395                                l1926 0389  
                              l1880 026F                                l1768 0540  
                              l1696 03C3                                l1688 036B  
                              l1864 0189                                l1856 0162  
                              l1848 0150                                l1792 0078  
                              l1784 004B                                l1776 0027  
                              l1872 03F2                                l1936 039A  
                              l1928 038C                                l1882 0275  
                              l1890 05A8                                l1698 03C6  
                              l1866 0192                                l1858 016B  
                              l1794 007E                                l1786 0056  
                              l1778 0033                                l1874 03F9  
                              l1938 03A4                                l1884 027E  
                              l1892 05B2                                l1796 008B  
                              l1788 005C                                l1876 0420  
                              l1886 028C                                l1894 05B6  
                              l1798 008F                                l1888 0292  
                              l1896 05B7          __end_of_setupNewVolumeFlow 055F  
                              STR_1 0506                                STR_2 0515  
                              u1100 04E8                                u1101 04E7  
                              u1110 020D                                u1111 020C  
                              u1200 0265                                u1120 0218  
                              u1201 0264                                u1121 0217  
                 writeValor@unidade 0030                                u1130 0229  
                              u1210 032F                                u1131 0228  
                              u1211 032E                                u1300 02FB  
                              u1301 02FA                                u1070 04CF  
                              u1150 023B                                u1230 035A  
                              u1310 0305                                u1071 04CE  
                              u1151 023A                                u1231 0359  
                              u1311 0304                                u1080 04DA  
                              u1400 00B4                                u1081 04D9  
                              u1145 022D                                u1225 0337  
                              u1401 00B3                                u1090 04E1  
                              u1170 024C                                u1330 0318  
                              u1410 00D1                                u1091 04E0  
                              u1171 024B                                u1331 0317  
                              u1315 0301                                u1411 00D0  
                              u1340 031D                                u1260 02D3  
                              u1420 0101                                u1500 04BD  
                              u1165 023C                                u1245 0362  
                              u1341 031C                                u1325 030C  
                              u1261 02D2                                u1421 0100  
                              u1501 04BC                                u1190 0260  
                              u1350 0482                                u1270 02DE  
                              u1430 0124                                u1191 025F  
                              u1175 0248                                u1255 03C9  
                              u1351 0481                                u1271 02DD  
                              u1431 0123                                u1280 02E9  
                              u1440 0137                                u1360 005C  
                              u1185 0254                                u1281 02E8  
                              u1441 0136                                u1361 005B  
                              u1505 04B9                                u1450 0156  
                              u1370 0078                                u1451 0155  
                              u1371 0077                                u1460 0160  
                              u1380 008B                                u1461 015F  
                              u1445 0133                                u1381 008A  
                              u1517 03F6                                u1470 017E  
                              u1390 00AA                                u1295 02ED  
                              u1471 017D                                u1607 0171  
                              u1391 00A9                                u1527 0534  
                              u1480 0192                                u1617 03D9  
                              u1481 0191                                u1385 0087  
                              u1537 0039                                u1490 0527  
                              u1627 03E9                                u1547 006C  
                              u1491 0526                                u1637 0279  
                              u1557 00A0                                u1647 0288  
                              u1567 00C5                                u1657 0296  
                              u1577 00DE                                u1667 0570  
                              u1587 0118                                u1597 014C  
                              _INTF 0059               ??_getADConverterValue 002D  
                 ?_Lcd_Write_String 0070                                _main 037F  
                              btemp 007E                                start 000C  
                ??_Lcd_Write_String 0078                     __end_of_Lcd_Cmd 0579  
       ?_handleExternalInterruption 0070                               ?_main 0070  
                   __end_of___awdiv 026F                     __end_of___awmod 0327  
                   ___awdiv@divisor 0022                               i1l133 05F1  
                             i1l125 0459                               i1l128 0612  
                             i1l138 05DA                     ___awdiv@counter 0027  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTB 0006                               _PORTC 0007  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087                               _TRISD 0088  
                             _MLxMS 003B                   _timer_counter_max 0041  
                   __end_of_irrigar 0609                               pclath 000A  
                             status 0003                               wtemp0 007E  
                  __end_of_Lcd_Init 02CC                    __end_of_Lcd_Port 04EC  
                   __initialization 000F                        ?_interrupcao 0070  
                      __end_of_main 03B8                              ??_main 0079  
          setupNewVolumeFlow@new_ms 002D            ?_handleTimerInterruption 0070  
                            _ADRESH 001E                              _ADRESL 009E  
                  ___awdiv@dividend 0024                              u100_20 042B  
                            u100_21 042A                              u101_20 0431  
                            u101_21 0430                              u102_20 0447  
                            u102_21 0446                              u102_25 0443  
                            u103_20 05E5                              u103_21 05E4  
                            i1l1500 0611                              u104_20 05EB  
                            u104_21 05EA                              i1l1530 0438  
                            i1l1522 0425                              i1l1532 0447  
                            i1l1540 044F                              i1l1524 042B  
                            i1l1542 0451                              i1l1534 044A  
                            i1l1526 0431                              i1l1552 05E1  
                            i1l1536 044C                              i1l1544 0452  
                            i1l1528 0437                              i1l1554 05E5  
                            i1l1546 0455                              i1l1538 044D  
                            i1l1556 05EB                              i1l1548 0457  
                            i1l1558 05F0                              i1l1582 05D0  
                            i1l1496 0609                              i1l1498 060D  
                         ??_Lcd_Cmd 0074                              _TMR1IF 0060  
 __end_of_setupExternalInterruption 062A                              ___wmul 0483  
                         ??___awdiv 0026                           ??___awmod 0077  
                  ___awdiv@quotient 0029                     ___awmod@divisor 0073  
                   ___awmod@counter 0020                    __end_of_setupADC 05A8  
                         ??_irrigar 0073                              saved_w 007E  
                   Lcd_Set_Cursor@a 0022                     Lcd_Set_Cursor@b 0077  
                   Lcd_Set_Cursor@y 0024                     Lcd_Set_Cursor@z 0023  
                 __end_ofi1_irrigar 0613             __end_of__initialization 0023  
                 __end_of_Lcd_Clear 05FF                      __pcstackCOMMON 0070  
                      __pidataBANK0 0613                      _Lcd_Set_Cursor 0327  
                    _OPTION_REGbits 0081                           ?_Lcd_Init 0070  
                         ?_Lcd_Port 0070                          __pbssBANK0 0043  
                        __pmaintext 037F                  _setupNewVolumeFlow 0540  
                           ?___wmul 0073                    handleMenu@volume 0034  
      __end_of_changeTimerMaxConter 0591                          __pintentry 0004  
                        _handleMenu 0027              __end_of_Lcd_Set_Cursor 037F  
               ?_setupNewVolumeFlow 0070         __end_of_getADConverterValue 0425  
                        ??_Lcd_Init 0077                          ??_Lcd_Port 0073  
                        __stringtab 0500                      _Lcd_Write_Char 03B8  
                           _Lcd_Cmd 055F                ??_setupNewVolumeFlow 0079  
                         ?_setupADC 0070                             ___awdiv 0206  
                           ___awmod 02CC                     ?_Lcd_Set_Cursor 0077  
                           __ptext1 04A8                             __ptext2 05FF  
                           __ptext3 03EF                             __ptext4 0521  
                           __ptext5 0027                             __ptext6 0198  
                           __ptext7 02CC                             __ptext8 0327  
                           __ptext9 045A                           _T1CONbits 0010  
                  ___awmod@dividend 0075                             _irrigar 05FF  
            __end_of_Lcd_Write_Char 03EF                end_of_initialization 0023  
                        ??_setupADC 0073                           Lcd_Port@a 0073  
                       ?_handleMenu 0070                           _PORTBbits 0006  
                        _setupTimer 05A8                          _setup_menu 0043  
                        _verifyMenu 0521                     ?_Lcd_Write_Char 0070  
                 Lcd_Write_String@a 0022                   Lcd_Write_String@i 0020  
              _changeTimerMaxConter 0579          __end_of_setupWatchdogTimer 0623  
                     ?_verifySensor 0070                           i1_irrigar 0609  
        ?_setupExternalInterruption 0070                           _Lcd_Clear 05F2  
                        _writeValor 0198                      __end_of___wmul 04A8  
                  _Lcd_Write_String 045A                 start_initialization 000F  
             ?_changeTimerMaxConter 002B                      ??_verifySensor 0031  
                        ?i1_irrigar 0070                          ?_Lcd_Clear 0070  
                          ??___wmul 0077                          init_fetch0 05BD  
                       __pdataBANK0 003B          getADConverterValue@leitura 002F  
                   Lcd_Write_Char@a 0077                     Lcd_Write_Char@y 0076  
                       ?_setupTimer 0070                         __pbssCOMMON 0079  
                       ?_verifyMenu 0070                           ___latbits 0002  
                     __pcstackBANK0 0020                            ?_Lcd_Cmd 0070  
           _handleTimerInterruption 0425                       ??_interrupcao 0071  
                  ??_Lcd_Set_Cursor 0020                   handleMenu@umidade 0036  
                          ?___awdiv 0022                            ?___awmod 0073  
                       ?_writeValor 002B                           __pstrings 0500  
                          ?_irrigar 0070              ??_changeTimerMaxConter 0079  
                 interrupt_function 0004                      ___wmul@product 0077  
                          _PIE1bits 008C                         ??i1_irrigar 0070  
                          Lcd_Cmd@a 0076                            _PIR1bits 000C  
                       ??_Lcd_Clear 0077                        ??_handleMenu 0031  
               __end_of_interrupcao 05E1                          _ADCON0bits 001F  
                       __stringbase 0505                          _ADCON1bits 009F  
                 ___wmul@multiplier 0073                __end_of_verifySensor 04CA  
                  ??_Lcd_Write_Char 0074                            _Lcd_Init 026F  
                          _Lcd_Port 04CA           ??_handleTimerInterruption 0070  
          __end_of_Lcd_Write_String 0483                  __end_of_handleMenu 0198  
       ??_setupExternalInterruption 0073                  _setupWatchdogTimer 061B  
__end_of_handleExternalInterruption 05F2          _handleExternalInterruption 05E1  
                __end_of__stringtab 0506                 ?_setupWatchdogTimer 0070  
                          __ptext10 03B8                            __ptext11 05F2  
                          __ptext20 026F                            __ptext12 061B  
                          __ptext21 055F                            __ptext13 05A8  
                          __ptext22 04CA                            __ptext14 0540  
                          __ptext23 05D0                            __ptext15 0579  
                          __ptext24 0425                            __ptext16 0206  
                          __ptext25 05E1                            __ptext17 0483  
                          __ptext26 0609                            __ptext18 0623  
                          __ptext19 0591          changeTimerMaxConter@mili_s 002B  
              ??_setupWatchdogTimer 0073                            _setupADC 0591  
                       _interrupcao 05D0     __end_of_handleTimerInterruption 045A  
                    _umidade_minima 003F                       _timer_counter 0045  
                      ??_setupTimer 0079                          _INTCONbits 000B  
                      ??_verifyMenu 0038           _setupExternalInterruption 0623  
                          init_ram0 05C1                  Lcd_Write_Char@temp 0075  
                          intlevel1 0000                  __end_of_setupTimer 05BD  
                         stringcode 0500                  __end_of_verifyMenu 0540  
                      ??_writeValor 002D                  Lcd_Set_Cursor@temp 0025  
               _getADConverterValue 03EF                            stringdir 0500  
                          stringtab 0500                        _water_volume 003D  
              ?_getADConverterValue 002B                  __end_of_writeValor 0206  
                      _verifySensor 04A8  
